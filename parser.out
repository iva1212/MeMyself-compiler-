Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
Rule 2     programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
Rule 3     inicio_programa -> ID
Rule 4     vars -> VAR vars2
Rule 5     vars -> empty
Rule 6     vars2 -> tipo id_var SEMICOLON agregar_variable vars2
Rule 7     vars2 -> tipo id_var SEMICOLON agregar_variable
Rule 8     id_var -> ID agregar_lstvar COMA id_var
Rule 9     id_var -> ID agregar_lstvar
Rule 10    tipo -> NOM_INT
Rule 11    tipo -> NOM_FLOAT
Rule 12    tipo -> NOM_CHAR
Rule 13    tipo_func -> VOID
Rule 14    tipo_func -> NOM_INT
Rule 15    tipo_func -> NOM_FLOAT
Rule 16    tipo_func -> NOM_CHAR
Rule 17    funs -> FUNC tipo_func funs2
Rule 18    funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
Rule 19    funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs
Rule 20    parametros -> tipo ID agregar_param COMA parametros
Rule 21    parametros -> tipo ID agregar_param
Rule 22    bloque -> LBRACKET bloque1 RBRACKET
Rule 23    bloque -> LBRACKET RBRACKET
Rule 24    bloque1 -> estatuto bloque1
Rule 25    bloque1 -> empty
Rule 26    estatuto -> asignacion
Rule 27    estatuto -> modulo_v
Rule 28    estatuto -> return
Rule 29    estatuto -> lectura
Rule 30    estatuto -> escritura
Rule 31    estatuto -> desicion
Rule 32    estatuto -> repeticion
Rule 33    estatuto -> func_esp
Rule 34    asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
Rule 35    modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
Rule 36    modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
Rule 37    return -> RETURN LPAREN exp RPAREN SEMICOLON
Rule 38    lectura -> READ LPAREN exp_var agregar_cuad_read lectura2
Rule 39    lectura2 -> COMA exp_var agregar_cuad_read lectura2
Rule 40    lectura2 -> RPAREN SEMICOLON
Rule 41    func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
Rule 42    func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
Rule 43    func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
Rule 44    e -> exp agregar_param_check COMA e
Rule 45    e -> exp agregar_param_check
Rule 46    func_esp_name_param -> LINE agregar_esp_func
Rule 47    func_esp_name_param -> POINT agregar_esp_func
Rule 48    func_esp_name_param -> CIRCLE agregar_esp_func
Rule 49    func_esp_name_param -> ARCUP agregar_esp_func
Rule 50    func_esp_name_param -> ARCDOWN agregar_esp_func
Rule 51    func_esp_name_param -> SETX agregar_esp_func
Rule 52    func_esp_name_param -> SETY agregar_esp_func
Rule 53    func_esp_name_param -> RIGHT agregar_esp_func
Rule 54    func_esp_name_param -> LEFT agregar_esp_func
Rule 55    func_esp_name_param -> PENSIZE agregar_esp_func
Rule 56    func_esp_name_no_param -> PENUP agregar_esp_func
Rule 57    func_esp_name_no_param -> PENDOWN agregar_esp_func
Rule 58    func_esp_name_no_param -> CLEAR agregar_esp_func
Rule 59    escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON
Rule 60    escritura2 -> expresion agregar_cuad_print_exp COMA escritura2
Rule 61    escritura2 -> STRING agregar_cuad_print_str COMA escritura2
Rule 62    escritura2 -> expresion agregar_cuad_print_exp
Rule 63    escritura2 -> STRING agregar_cuad_print_str
Rule 64    desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
Rule 65    desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
Rule 66    else -> ELSE agregar_cuad_else bloque
Rule 67    var_cte -> INT
Rule 68    var_cte -> FLOAT
Rule 69    var_cte -> CHAR
Rule 70    repeticion -> condicional
Rule 71    repeticion -> no_condicional
Rule 72    condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
Rule 73    no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
Rule 74    expresion -> exp_log agregar_cuad_log
Rule 75    expresion -> exp_log agregar_cuad_log AND agregar_exp_op exp_log
Rule 76    expresion -> exp_log agregar_cuad_log OR agregar_exp_op exp_log
Rule 77    expresion -> empty
Rule 78    exp_log -> exp agregar_cuad_comp
Rule 79    exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
Rule 80    exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
Rule 81    exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
Rule 82    exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
Rule 83    exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
Rule 84    exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
Rule 85    exp -> termino agregar_cuad_arith
Rule 86    exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp
Rule 87    exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp
Rule 88    termino -> factor agregar_cuad_factor
Rule 89    termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino
Rule 90    termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino
Rule 91    factor -> factor_paren
Rule 92    factor -> PLUS var_cte
Rule 93    factor -> MINUS var_cte
Rule 94    factor -> return_func
Rule 95    factor -> var_cte
Rule 96    factor -> exp_var
Rule 97    factor_paren -> LPAREN agregar_exp_op expresion RPAREN
Rule 98    return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func
Rule 99    exp_var -> ID
Rule 100   empty -> <empty>
Rule 101   agregar_funs -> <empty>
Rule 102   agregar_param -> empty
Rule 103   agregar_exp_op -> empty
Rule 104   agregar_lstvar -> empty
Rule 105   agregar_variable -> empty
Rule 106   agregar_cuad_main -> empty
Rule 107   completar_cuad_main -> empty
Rule 108   agregar_cuad_log -> empty
Rule 109   agregar_cuad_comp -> empty
Rule 110   agregar_cuad_arith -> empty
Rule 111   agregar_cuad_factor -> empty
Rule 112   agregar_cuad_asign -> empty
Rule 113   agregar_cuad_read -> empty
Rule 114   agregar_cuad_print_str -> empty
Rule 115   agregar_cuad_print_exp -> empty
Rule 116   agregar_cuad_if -> empty
Rule 117   agregar_cuad_else -> empty
Rule 118   agregar_for_var -> empty
Rule 119   igualar_for_var -> empty
Rule 120   agregar_for_cond -> empty
Rule 121   agregar_while -> empty
Rule 122   agregar_while_cond -> empty
Rule 123   finalizar_funs -> empty
Rule 124   agregar_cuad_era -> empty
Rule 125   agregar_param_check -> empty
Rule 126   fin_func -> empty
Rule 127   agregar_esp_func -> empty
Rule 128   agregar_cuad_esp_param_func -> empty
Rule 129   agregar_cuad_esp_no_param_func -> empty

Terminals, with rules where they appear

AND                  : 75
ARCDOWN              : 50
ARCUP                : 49
CHAR                 : 69
CIRCLE               : 48
CLEAR                : 58
COLOR                : 43
COMA                 : 8 20 39 43 43 44 60 61
DIVIDE               : 90
DO                   : 72 73
DOUBLE               : 83
ELSE                 : 66
EQUALS               : 34 73
FLOAT                : 68
FOR                  : 73
FUNC                 : 17
ID                   : 3 8 9 18 19 20 21 35 36 73 98 99
IF                   : 64 65
INT                  : 67
LBRACKET             : 22 23
LEFT                 : 54
LINE                 : 46
LPAREN               : 1 2 18 19 35 36 37 38 41 42 43 59 64 65 72 97 98
LSETHAN              : 81
LSTHAN               : 80
MAIN                 : 1 2
MINUS                : 87 93
MODULE               : 18 19
MRETHAN              : 82
MRTHAN               : 79
NOM_CHAR             : 12 16
NOM_FLOAT            : 11 15
NOM_INT              : 10 14
NOT_EQUALS           : 84
OR                   : 76
PENDOWN              : 57
PENSIZE              : 55
PENUP                : 56
PLUS                 : 86 92
POINT                : 47
PROGRAM              : 1 2
RBRACKET             : 22 23
READ                 : 38
RETURN               : 37
RIGHT                : 53
RPAREN               : 1 2 18 19 35 36 37 40 41 42 43 59 64 65 72 97 98
SEMICOLON            : 1 2 6 7 34 35 36 37 40 41 42 43 59
SETX                 : 51
SETY                 : 52
STRING               : 61 63
THEN                 : 64 65
TIMES                : 89
TO                   : 73
VAR                  : 4
VOID                 : 13
WHILE                : 72
WRITE                : 59
error                : 

Nonterminals, with rules where they appear

agregar_cuad_arith   : 85 86 87
agregar_cuad_asign   : 34
agregar_cuad_comp    : 78 79 80 81 82 83 84
agregar_cuad_else    : 66
agregar_cuad_era     : 35 36 98
agregar_cuad_esp_no_param_func : 42
agregar_cuad_esp_param_func : 41 43
agregar_cuad_factor  : 88 89 90
agregar_cuad_if      : 64 65
agregar_cuad_log     : 74 75 76
agregar_cuad_main    : 1 2
agregar_cuad_print_exp : 60 62
agregar_cuad_print_str : 61 63
agregar_cuad_read    : 38 39
agregar_esp_func     : 43 46 47 48 49 50 51 52 53 54 55 56 57 58
agregar_exp_op       : 34 75 76 79 80 81 82 83 84 86 87 89 90 97
agregar_for_cond     : 73
agregar_for_var      : 73
agregar_funs         : 18 19
agregar_lstvar       : 8 9
agregar_param        : 20 21
agregar_param_check  : 44 45
agregar_variable     : 6 7
agregar_while        : 72
agregar_while_cond   : 72
asignacion           : 26
bloque               : 1 2 18 19 64 65 66 72 73
bloque1              : 22 24
completar_cuad_main  : 1 2
condicional          : 70
desicion             : 31
e                    : 35 44 98
else                 : 65
empty                : 5 25 77 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
escritura            : 30
escritura2           : 59 60 61
estatuto             : 24
exp                  : 37 41 43 43 43 44 45 73 73 78 79 80 81 82 83 84 86 87
exp_log              : 74 75 75 76 76 79 80 81 82 83 84
exp_var              : 34 38 39 96
expresion            : 34 60 62 64 65 72 97
factor               : 88 89 90
factor_paren         : 91
fin_func             : 35 36 98
finalizar_funs       : 18 19
func_esp             : 33
func_esp_name_no_param : 42
func_esp_name_param  : 41
funs                 : 1 19
funs2                : 17
id_var               : 6 7 8
igualar_for_var      : 73
inicio_programa      : 1 2
lectura              : 29
lectura2             : 38 39
modulo_v             : 27
no_condicional       : 71
parametros           : 18 19 20
programa             : 0
repeticion           : 32
return               : 28
return_func          : 94
termino              : 85 86 87 89 90
tipo                 : 6 7 20 21
tipo_func            : 17
var_cte              : 92 93 95
vars                 : 1 2 18 19
vars2                : 4 6

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> . PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM . inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (3) inicio_programa -> . ID

    ID              shift and go to state 4

    inicio_programa                shift and go to state 3

state 3

    (1) programa -> PROGRAM inicio_programa . agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa . agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (106) agregar_cuad_main -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_main              shift and go to state 5
    empty                          shift and go to state 6

state 4

    (3) inicio_programa -> ID .

    SEMICOLON       reduce using rule 3 (inicio_programa -> ID .)


state 5

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main . SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main . SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque

    SEMICOLON       shift and go to state 7


state 6

    (106) agregar_cuad_main -> empty .

    SEMICOLON       reduce using rule 106 (agregar_cuad_main -> empty .)


state 7

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON . vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON . vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (4) vars -> . VAR vars2
    (5) vars -> . empty
    (100) empty -> .

    VAR             shift and go to state 9
    MAIN            reduce using rule 100 (empty -> .)
    FUNC            reduce using rule 100 (empty -> .)

    vars                           shift and go to state 8
    empty                          shift and go to state 10

state 8

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars . funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars . MAIN LPAREN RPAREN completar_cuad_main bloque
    (17) funs -> . FUNC tipo_func funs2

    MAIN            shift and go to state 12
    FUNC            shift and go to state 13

    funs                           shift and go to state 11

state 9

    (4) vars -> VAR . vars2
    (6) vars2 -> . tipo id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> . tipo id_var SEMICOLON agregar_variable
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    vars2                          shift and go to state 14
    tipo                           shift and go to state 15

state 10

    (5) vars -> empty .

    MAIN            reduce using rule 5 (vars -> empty .)
    FUNC            reduce using rule 5 (vars -> empty .)
    LBRACKET        reduce using rule 5 (vars -> empty .)


state 11

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs . MAIN LPAREN RPAREN completar_cuad_main bloque

    MAIN            shift and go to state 19


state 12

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN . LPAREN RPAREN completar_cuad_main bloque

    LPAREN          shift and go to state 20


state 13

    (17) funs -> FUNC . tipo_func funs2
    (13) tipo_func -> . VOID
    (14) tipo_func -> . NOM_INT
    (15) tipo_func -> . NOM_FLOAT
    (16) tipo_func -> . NOM_CHAR

    VOID            shift and go to state 22
    NOM_INT         shift and go to state 23
    NOM_FLOAT       shift and go to state 24
    NOM_CHAR        shift and go to state 25

    tipo_func                      shift and go to state 21

state 14

    (4) vars -> VAR vars2 .

    MAIN            reduce using rule 4 (vars -> VAR vars2 .)
    FUNC            reduce using rule 4 (vars -> VAR vars2 .)
    LBRACKET        reduce using rule 4 (vars -> VAR vars2 .)


state 15

    (6) vars2 -> tipo . id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> tipo . id_var SEMICOLON agregar_variable
    (8) id_var -> . ID agregar_lstvar COMA id_var
    (9) id_var -> . ID agregar_lstvar

    ID              shift and go to state 27

    id_var                         shift and go to state 26

state 16

    (10) tipo -> NOM_INT .

    ID              reduce using rule 10 (tipo -> NOM_INT .)


state 17

    (11) tipo -> NOM_FLOAT .

    ID              reduce using rule 11 (tipo -> NOM_FLOAT .)


state 18

    (12) tipo -> NOM_CHAR .

    ID              reduce using rule 12 (tipo -> NOM_CHAR .)


state 19

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN . LPAREN RPAREN completar_cuad_main bloque

    LPAREN          shift and go to state 28


state 20

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN . RPAREN completar_cuad_main bloque

    RPAREN          shift and go to state 29


state 21

    (17) funs -> FUNC tipo_func . funs2
    (18) funs2 -> . MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> . MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs

    MODULE          shift and go to state 31

    funs2                          shift and go to state 30

state 22

    (13) tipo_func -> VOID .

    MODULE          reduce using rule 13 (tipo_func -> VOID .)


state 23

    (14) tipo_func -> NOM_INT .

    MODULE          reduce using rule 14 (tipo_func -> NOM_INT .)


state 24

    (15) tipo_func -> NOM_FLOAT .

    MODULE          reduce using rule 15 (tipo_func -> NOM_FLOAT .)


state 25

    (16) tipo_func -> NOM_CHAR .

    MODULE          reduce using rule 16 (tipo_func -> NOM_CHAR .)


state 26

    (6) vars2 -> tipo id_var . SEMICOLON agregar_variable vars2
    (7) vars2 -> tipo id_var . SEMICOLON agregar_variable

    SEMICOLON       shift and go to state 32


state 27

    (8) id_var -> ID . agregar_lstvar COMA id_var
    (9) id_var -> ID . agregar_lstvar
    (104) agregar_lstvar -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_lstvar                 shift and go to state 33
    empty                          shift and go to state 34

state 28

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN . RPAREN completar_cuad_main bloque

    RPAREN          shift and go to state 35


state 29

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN . completar_cuad_main bloque
    (107) completar_cuad_main -> . empty
    (100) empty -> .

    LBRACKET        reduce using rule 100 (empty -> .)

    completar_cuad_main            shift and go to state 36
    empty                          shift and go to state 37

state 30

    (17) funs -> FUNC tipo_func funs2 .

    MAIN            reduce using rule 17 (funs -> FUNC tipo_func funs2 .)


state 31

    (18) funs2 -> MODULE . ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE . ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs

    ID              shift and go to state 38


state 32

    (6) vars2 -> tipo id_var SEMICOLON . agregar_variable vars2
    (7) vars2 -> tipo id_var SEMICOLON . agregar_variable
    (105) agregar_variable -> . empty
    (100) empty -> .

    NOM_INT         reduce using rule 100 (empty -> .)
    NOM_FLOAT       reduce using rule 100 (empty -> .)
    NOM_CHAR        reduce using rule 100 (empty -> .)
    MAIN            reduce using rule 100 (empty -> .)
    FUNC            reduce using rule 100 (empty -> .)
    LBRACKET        reduce using rule 100 (empty -> .)

    agregar_variable               shift and go to state 39
    empty                          shift and go to state 40

state 33

    (8) id_var -> ID agregar_lstvar . COMA id_var
    (9) id_var -> ID agregar_lstvar .

    COMA            shift and go to state 41
    SEMICOLON       reduce using rule 9 (id_var -> ID agregar_lstvar .)


state 34

    (104) agregar_lstvar -> empty .

    COMA            reduce using rule 104 (agregar_lstvar -> empty .)
    SEMICOLON       reduce using rule 104 (agregar_lstvar -> empty .)


state 35

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN . completar_cuad_main bloque
    (107) completar_cuad_main -> . empty
    (100) empty -> .

    LBRACKET        reduce using rule 100 (empty -> .)

    completar_cuad_main            shift and go to state 42
    empty                          shift and go to state 37

state 36

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main . bloque
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 43

state 37

    (107) completar_cuad_main -> empty .

    LBRACKET        reduce using rule 107 (completar_cuad_main -> empty .)


state 38

    (18) funs2 -> MODULE ID . agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID . agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs
    (101) agregar_funs -> .

    LPAREN          reduce using rule 101 (agregar_funs -> .)

    agregar_funs                   shift and go to state 45

state 39

    (6) vars2 -> tipo id_var SEMICOLON agregar_variable . vars2
    (7) vars2 -> tipo id_var SEMICOLON agregar_variable .
    (6) vars2 -> . tipo id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> . tipo id_var SEMICOLON agregar_variable
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    MAIN            reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    FUNC            reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    LBRACKET        reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    tipo                           shift and go to state 15
    vars2                          shift and go to state 46

state 40

    (105) agregar_variable -> empty .

    NOM_INT         reduce using rule 105 (agregar_variable -> empty .)
    NOM_FLOAT       reduce using rule 105 (agregar_variable -> empty .)
    NOM_CHAR        reduce using rule 105 (agregar_variable -> empty .)
    MAIN            reduce using rule 105 (agregar_variable -> empty .)
    FUNC            reduce using rule 105 (agregar_variable -> empty .)
    LBRACKET        reduce using rule 105 (agregar_variable -> empty .)


state 41

    (8) id_var -> ID agregar_lstvar COMA . id_var
    (8) id_var -> . ID agregar_lstvar COMA id_var
    (9) id_var -> . ID agregar_lstvar

    ID              shift and go to state 27

    id_var                         shift and go to state 47

state 42

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main . bloque
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 48

state 43

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque .

    $end            reduce using rule 2 (programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque .)


state 44

    (22) bloque -> LBRACKET . bloque1 RBRACKET
    (23) bloque -> LBRACKET . RBRACKET
    (24) bloque1 -> . estatuto bloque1
    (25) bloque1 -> . empty
    (26) estatuto -> . asignacion
    (27) estatuto -> . modulo_v
    (28) estatuto -> . return
    (29) estatuto -> . lectura
    (30) estatuto -> . escritura
    (31) estatuto -> . desicion
    (32) estatuto -> . repeticion
    (33) estatuto -> . func_esp
    (100) empty -> .
    (34) asignacion -> . exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (35) modulo_v -> . ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (36) modulo_v -> . ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (37) return -> . RETURN LPAREN exp RPAREN SEMICOLON
    (38) lectura -> . READ LPAREN exp_var agregar_cuad_read lectura2
    (59) escritura -> . WRITE LPAREN escritura2 RPAREN SEMICOLON
    (64) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (65) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
    (70) repeticion -> . condicional
    (71) repeticion -> . no_condicional
    (41) func_esp -> . func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (42) func_esp -> . func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
    (43) func_esp -> . COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (99) exp_var -> . ID
    (72) condicional -> . WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (73) no_condicional -> . FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (46) func_esp_name_param -> . LINE agregar_esp_func
    (47) func_esp_name_param -> . POINT agregar_esp_func
    (48) func_esp_name_param -> . CIRCLE agregar_esp_func
    (49) func_esp_name_param -> . ARCUP agregar_esp_func
    (50) func_esp_name_param -> . ARCDOWN agregar_esp_func
    (51) func_esp_name_param -> . SETX agregar_esp_func
    (52) func_esp_name_param -> . SETY agregar_esp_func
    (53) func_esp_name_param -> . RIGHT agregar_esp_func
    (54) func_esp_name_param -> . LEFT agregar_esp_func
    (55) func_esp_name_param -> . PENSIZE agregar_esp_func
    (56) func_esp_name_no_param -> . PENUP agregar_esp_func
    (57) func_esp_name_no_param -> . PENDOWN agregar_esp_func
    (58) func_esp_name_no_param -> . CLEAR agregar_esp_func

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 50
    ID              shift and go to state 62
    RETURN          shift and go to state 63
    READ            shift and go to state 64
    WRITE           shift and go to state 65
    IF              shift and go to state 66
    COLOR           shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    LINE            shift and go to state 74
    POINT           shift and go to state 75
    CIRCLE          shift and go to state 76
    ARCUP           shift and go to state 77
    ARCDOWN         shift and go to state 78
    SETX            shift and go to state 79
    SETY            shift and go to state 80
    RIGHT           shift and go to state 81
    LEFT            shift and go to state 82
    PENSIZE         shift and go to state 83
    PENUP           shift and go to state 84
    PENDOWN         shift and go to state 85
    CLEAR           shift and go to state 86

  ! RBRACKET        [ reduce using rule 100 (empty -> .) ]

    bloque1                        shift and go to state 49
    estatuto                       shift and go to state 51
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    modulo_v                       shift and go to state 54
    return                         shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    desicion                       shift and go to state 58
    repeticion                     shift and go to state 59
    func_esp                       shift and go to state 60
    exp_var                        shift and go to state 61
    condicional                    shift and go to state 67
    no_condicional                 shift and go to state 68
    func_esp_name_param            shift and go to state 69
    func_esp_name_no_param         shift and go to state 70

state 45

    (18) funs2 -> MODULE ID agregar_funs . LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs . LPAREN parametros RPAREN vars bloque finalizar_funs funs

    LPAREN          shift and go to state 87


state 46

    (6) vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .

    MAIN            reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)
    FUNC            reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)
    LBRACKET        reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)


state 47

    (8) id_var -> ID agregar_lstvar COMA id_var .

    SEMICOLON       reduce using rule 8 (id_var -> ID agregar_lstvar COMA id_var .)


state 48

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque .)


state 49

    (22) bloque -> LBRACKET bloque1 . RBRACKET

    RBRACKET        shift and go to state 88


state 50

    (23) bloque -> LBRACKET RBRACKET .

    $end            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    FUNC            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ID              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    READ            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WRITE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    IF              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    COLOR           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    LINE            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    POINT           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    CIRCLE          reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ARCUP           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ARCDOWN         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    SETX            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    SETY            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RIGHT           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    LEFT            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    PENSIZE         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    PENUP           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    PENDOWN         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    CLEAR           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)


state 51

    (24) bloque1 -> estatuto . bloque1
    (24) bloque1 -> . estatuto bloque1
    (25) bloque1 -> . empty
    (26) estatuto -> . asignacion
    (27) estatuto -> . modulo_v
    (28) estatuto -> . return
    (29) estatuto -> . lectura
    (30) estatuto -> . escritura
    (31) estatuto -> . desicion
    (32) estatuto -> . repeticion
    (33) estatuto -> . func_esp
    (100) empty -> .
    (34) asignacion -> . exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (35) modulo_v -> . ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (36) modulo_v -> . ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (37) return -> . RETURN LPAREN exp RPAREN SEMICOLON
    (38) lectura -> . READ LPAREN exp_var agregar_cuad_read lectura2
    (59) escritura -> . WRITE LPAREN escritura2 RPAREN SEMICOLON
    (64) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (65) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
    (70) repeticion -> . condicional
    (71) repeticion -> . no_condicional
    (41) func_esp -> . func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (42) func_esp -> . func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
    (43) func_esp -> . COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (99) exp_var -> . ID
    (72) condicional -> . WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (73) no_condicional -> . FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (46) func_esp_name_param -> . LINE agregar_esp_func
    (47) func_esp_name_param -> . POINT agregar_esp_func
    (48) func_esp_name_param -> . CIRCLE agregar_esp_func
    (49) func_esp_name_param -> . ARCUP agregar_esp_func
    (50) func_esp_name_param -> . ARCDOWN agregar_esp_func
    (51) func_esp_name_param -> . SETX agregar_esp_func
    (52) func_esp_name_param -> . SETY agregar_esp_func
    (53) func_esp_name_param -> . RIGHT agregar_esp_func
    (54) func_esp_name_param -> . LEFT agregar_esp_func
    (55) func_esp_name_param -> . PENSIZE agregar_esp_func
    (56) func_esp_name_no_param -> . PENUP agregar_esp_func
    (57) func_esp_name_no_param -> . PENDOWN agregar_esp_func
    (58) func_esp_name_no_param -> . CLEAR agregar_esp_func

    RBRACKET        reduce using rule 100 (empty -> .)
    ID              shift and go to state 62
    RETURN          shift and go to state 63
    READ            shift and go to state 64
    WRITE           shift and go to state 65
    IF              shift and go to state 66
    COLOR           shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    LINE            shift and go to state 74
    POINT           shift and go to state 75
    CIRCLE          shift and go to state 76
    ARCUP           shift and go to state 77
    ARCDOWN         shift and go to state 78
    SETX            shift and go to state 79
    SETY            shift and go to state 80
    RIGHT           shift and go to state 81
    LEFT            shift and go to state 82
    PENSIZE         shift and go to state 83
    PENUP           shift and go to state 84
    PENDOWN         shift and go to state 85
    CLEAR           shift and go to state 86

    estatuto                       shift and go to state 51
    bloque1                        shift and go to state 89
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    modulo_v                       shift and go to state 54
    return                         shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    desicion                       shift and go to state 58
    repeticion                     shift and go to state 59
    func_esp                       shift and go to state 60
    exp_var                        shift and go to state 61
    condicional                    shift and go to state 67
    no_condicional                 shift and go to state 68
    func_esp_name_param            shift and go to state 69
    func_esp_name_no_param         shift and go to state 70

state 52

    (25) bloque1 -> empty .

    RBRACKET        reduce using rule 25 (bloque1 -> empty .)


state 53

    (26) estatuto -> asignacion .

    ID              reduce using rule 26 (estatuto -> asignacion .)
    RETURN          reduce using rule 26 (estatuto -> asignacion .)
    READ            reduce using rule 26 (estatuto -> asignacion .)
    WRITE           reduce using rule 26 (estatuto -> asignacion .)
    IF              reduce using rule 26 (estatuto -> asignacion .)
    COLOR           reduce using rule 26 (estatuto -> asignacion .)
    WHILE           reduce using rule 26 (estatuto -> asignacion .)
    FOR             reduce using rule 26 (estatuto -> asignacion .)
    LINE            reduce using rule 26 (estatuto -> asignacion .)
    POINT           reduce using rule 26 (estatuto -> asignacion .)
    CIRCLE          reduce using rule 26 (estatuto -> asignacion .)
    ARCUP           reduce using rule 26 (estatuto -> asignacion .)
    ARCDOWN         reduce using rule 26 (estatuto -> asignacion .)
    SETX            reduce using rule 26 (estatuto -> asignacion .)
    SETY            reduce using rule 26 (estatuto -> asignacion .)
    RIGHT           reduce using rule 26 (estatuto -> asignacion .)
    LEFT            reduce using rule 26 (estatuto -> asignacion .)
    PENSIZE         reduce using rule 26 (estatuto -> asignacion .)
    PENUP           reduce using rule 26 (estatuto -> asignacion .)
    PENDOWN         reduce using rule 26 (estatuto -> asignacion .)
    CLEAR           reduce using rule 26 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 26 (estatuto -> asignacion .)


state 54

    (27) estatuto -> modulo_v .

    ID              reduce using rule 27 (estatuto -> modulo_v .)
    RETURN          reduce using rule 27 (estatuto -> modulo_v .)
    READ            reduce using rule 27 (estatuto -> modulo_v .)
    WRITE           reduce using rule 27 (estatuto -> modulo_v .)
    IF              reduce using rule 27 (estatuto -> modulo_v .)
    COLOR           reduce using rule 27 (estatuto -> modulo_v .)
    WHILE           reduce using rule 27 (estatuto -> modulo_v .)
    FOR             reduce using rule 27 (estatuto -> modulo_v .)
    LINE            reduce using rule 27 (estatuto -> modulo_v .)
    POINT           reduce using rule 27 (estatuto -> modulo_v .)
    CIRCLE          reduce using rule 27 (estatuto -> modulo_v .)
    ARCUP           reduce using rule 27 (estatuto -> modulo_v .)
    ARCDOWN         reduce using rule 27 (estatuto -> modulo_v .)
    SETX            reduce using rule 27 (estatuto -> modulo_v .)
    SETY            reduce using rule 27 (estatuto -> modulo_v .)
    RIGHT           reduce using rule 27 (estatuto -> modulo_v .)
    LEFT            reduce using rule 27 (estatuto -> modulo_v .)
    PENSIZE         reduce using rule 27 (estatuto -> modulo_v .)
    PENUP           reduce using rule 27 (estatuto -> modulo_v .)
    PENDOWN         reduce using rule 27 (estatuto -> modulo_v .)
    CLEAR           reduce using rule 27 (estatuto -> modulo_v .)
    RBRACKET        reduce using rule 27 (estatuto -> modulo_v .)


state 55

    (28) estatuto -> return .

    ID              reduce using rule 28 (estatuto -> return .)
    RETURN          reduce using rule 28 (estatuto -> return .)
    READ            reduce using rule 28 (estatuto -> return .)
    WRITE           reduce using rule 28 (estatuto -> return .)
    IF              reduce using rule 28 (estatuto -> return .)
    COLOR           reduce using rule 28 (estatuto -> return .)
    WHILE           reduce using rule 28 (estatuto -> return .)
    FOR             reduce using rule 28 (estatuto -> return .)
    LINE            reduce using rule 28 (estatuto -> return .)
    POINT           reduce using rule 28 (estatuto -> return .)
    CIRCLE          reduce using rule 28 (estatuto -> return .)
    ARCUP           reduce using rule 28 (estatuto -> return .)
    ARCDOWN         reduce using rule 28 (estatuto -> return .)
    SETX            reduce using rule 28 (estatuto -> return .)
    SETY            reduce using rule 28 (estatuto -> return .)
    RIGHT           reduce using rule 28 (estatuto -> return .)
    LEFT            reduce using rule 28 (estatuto -> return .)
    PENSIZE         reduce using rule 28 (estatuto -> return .)
    PENUP           reduce using rule 28 (estatuto -> return .)
    PENDOWN         reduce using rule 28 (estatuto -> return .)
    CLEAR           reduce using rule 28 (estatuto -> return .)
    RBRACKET        reduce using rule 28 (estatuto -> return .)


state 56

    (29) estatuto -> lectura .

    ID              reduce using rule 29 (estatuto -> lectura .)
    RETURN          reduce using rule 29 (estatuto -> lectura .)
    READ            reduce using rule 29 (estatuto -> lectura .)
    WRITE           reduce using rule 29 (estatuto -> lectura .)
    IF              reduce using rule 29 (estatuto -> lectura .)
    COLOR           reduce using rule 29 (estatuto -> lectura .)
    WHILE           reduce using rule 29 (estatuto -> lectura .)
    FOR             reduce using rule 29 (estatuto -> lectura .)
    LINE            reduce using rule 29 (estatuto -> lectura .)
    POINT           reduce using rule 29 (estatuto -> lectura .)
    CIRCLE          reduce using rule 29 (estatuto -> lectura .)
    ARCUP           reduce using rule 29 (estatuto -> lectura .)
    ARCDOWN         reduce using rule 29 (estatuto -> lectura .)
    SETX            reduce using rule 29 (estatuto -> lectura .)
    SETY            reduce using rule 29 (estatuto -> lectura .)
    RIGHT           reduce using rule 29 (estatuto -> lectura .)
    LEFT            reduce using rule 29 (estatuto -> lectura .)
    PENSIZE         reduce using rule 29 (estatuto -> lectura .)
    PENUP           reduce using rule 29 (estatuto -> lectura .)
    PENDOWN         reduce using rule 29 (estatuto -> lectura .)
    CLEAR           reduce using rule 29 (estatuto -> lectura .)
    RBRACKET        reduce using rule 29 (estatuto -> lectura .)


state 57

    (30) estatuto -> escritura .

    ID              reduce using rule 30 (estatuto -> escritura .)
    RETURN          reduce using rule 30 (estatuto -> escritura .)
    READ            reduce using rule 30 (estatuto -> escritura .)
    WRITE           reduce using rule 30 (estatuto -> escritura .)
    IF              reduce using rule 30 (estatuto -> escritura .)
    COLOR           reduce using rule 30 (estatuto -> escritura .)
    WHILE           reduce using rule 30 (estatuto -> escritura .)
    FOR             reduce using rule 30 (estatuto -> escritura .)
    LINE            reduce using rule 30 (estatuto -> escritura .)
    POINT           reduce using rule 30 (estatuto -> escritura .)
    CIRCLE          reduce using rule 30 (estatuto -> escritura .)
    ARCUP           reduce using rule 30 (estatuto -> escritura .)
    ARCDOWN         reduce using rule 30 (estatuto -> escritura .)
    SETX            reduce using rule 30 (estatuto -> escritura .)
    SETY            reduce using rule 30 (estatuto -> escritura .)
    RIGHT           reduce using rule 30 (estatuto -> escritura .)
    LEFT            reduce using rule 30 (estatuto -> escritura .)
    PENSIZE         reduce using rule 30 (estatuto -> escritura .)
    PENUP           reduce using rule 30 (estatuto -> escritura .)
    PENDOWN         reduce using rule 30 (estatuto -> escritura .)
    CLEAR           reduce using rule 30 (estatuto -> escritura .)
    RBRACKET        reduce using rule 30 (estatuto -> escritura .)


state 58

    (31) estatuto -> desicion .

    ID              reduce using rule 31 (estatuto -> desicion .)
    RETURN          reduce using rule 31 (estatuto -> desicion .)
    READ            reduce using rule 31 (estatuto -> desicion .)
    WRITE           reduce using rule 31 (estatuto -> desicion .)
    IF              reduce using rule 31 (estatuto -> desicion .)
    COLOR           reduce using rule 31 (estatuto -> desicion .)
    WHILE           reduce using rule 31 (estatuto -> desicion .)
    FOR             reduce using rule 31 (estatuto -> desicion .)
    LINE            reduce using rule 31 (estatuto -> desicion .)
    POINT           reduce using rule 31 (estatuto -> desicion .)
    CIRCLE          reduce using rule 31 (estatuto -> desicion .)
    ARCUP           reduce using rule 31 (estatuto -> desicion .)
    ARCDOWN         reduce using rule 31 (estatuto -> desicion .)
    SETX            reduce using rule 31 (estatuto -> desicion .)
    SETY            reduce using rule 31 (estatuto -> desicion .)
    RIGHT           reduce using rule 31 (estatuto -> desicion .)
    LEFT            reduce using rule 31 (estatuto -> desicion .)
    PENSIZE         reduce using rule 31 (estatuto -> desicion .)
    PENUP           reduce using rule 31 (estatuto -> desicion .)
    PENDOWN         reduce using rule 31 (estatuto -> desicion .)
    CLEAR           reduce using rule 31 (estatuto -> desicion .)
    RBRACKET        reduce using rule 31 (estatuto -> desicion .)


state 59

    (32) estatuto -> repeticion .

    ID              reduce using rule 32 (estatuto -> repeticion .)
    RETURN          reduce using rule 32 (estatuto -> repeticion .)
    READ            reduce using rule 32 (estatuto -> repeticion .)
    WRITE           reduce using rule 32 (estatuto -> repeticion .)
    IF              reduce using rule 32 (estatuto -> repeticion .)
    COLOR           reduce using rule 32 (estatuto -> repeticion .)
    WHILE           reduce using rule 32 (estatuto -> repeticion .)
    FOR             reduce using rule 32 (estatuto -> repeticion .)
    LINE            reduce using rule 32 (estatuto -> repeticion .)
    POINT           reduce using rule 32 (estatuto -> repeticion .)
    CIRCLE          reduce using rule 32 (estatuto -> repeticion .)
    ARCUP           reduce using rule 32 (estatuto -> repeticion .)
    ARCDOWN         reduce using rule 32 (estatuto -> repeticion .)
    SETX            reduce using rule 32 (estatuto -> repeticion .)
    SETY            reduce using rule 32 (estatuto -> repeticion .)
    RIGHT           reduce using rule 32 (estatuto -> repeticion .)
    LEFT            reduce using rule 32 (estatuto -> repeticion .)
    PENSIZE         reduce using rule 32 (estatuto -> repeticion .)
    PENUP           reduce using rule 32 (estatuto -> repeticion .)
    PENDOWN         reduce using rule 32 (estatuto -> repeticion .)
    CLEAR           reduce using rule 32 (estatuto -> repeticion .)
    RBRACKET        reduce using rule 32 (estatuto -> repeticion .)


state 60

    (33) estatuto -> func_esp .

    ID              reduce using rule 33 (estatuto -> func_esp .)
    RETURN          reduce using rule 33 (estatuto -> func_esp .)
    READ            reduce using rule 33 (estatuto -> func_esp .)
    WRITE           reduce using rule 33 (estatuto -> func_esp .)
    IF              reduce using rule 33 (estatuto -> func_esp .)
    COLOR           reduce using rule 33 (estatuto -> func_esp .)
    WHILE           reduce using rule 33 (estatuto -> func_esp .)
    FOR             reduce using rule 33 (estatuto -> func_esp .)
    LINE            reduce using rule 33 (estatuto -> func_esp .)
    POINT           reduce using rule 33 (estatuto -> func_esp .)
    CIRCLE          reduce using rule 33 (estatuto -> func_esp .)
    ARCUP           reduce using rule 33 (estatuto -> func_esp .)
    ARCDOWN         reduce using rule 33 (estatuto -> func_esp .)
    SETX            reduce using rule 33 (estatuto -> func_esp .)
    SETY            reduce using rule 33 (estatuto -> func_esp .)
    RIGHT           reduce using rule 33 (estatuto -> func_esp .)
    LEFT            reduce using rule 33 (estatuto -> func_esp .)
    PENSIZE         reduce using rule 33 (estatuto -> func_esp .)
    PENUP           reduce using rule 33 (estatuto -> func_esp .)
    PENDOWN         reduce using rule 33 (estatuto -> func_esp .)
    CLEAR           reduce using rule 33 (estatuto -> func_esp .)
    RBRACKET        reduce using rule 33 (estatuto -> func_esp .)


state 61

    (34) asignacion -> exp_var . EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign

    EQUALS          shift and go to state 90


state 62

    (35) modulo_v -> ID . agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (36) modulo_v -> ID . agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (99) exp_var -> ID .
    (124) agregar_cuad_era -> . empty
    (100) empty -> .

    EQUALS          reduce using rule 99 (exp_var -> ID .)
    LPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_era               shift and go to state 91
    empty                          shift and go to state 92

state 63

    (37) return -> RETURN . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 93


state 64

    (38) lectura -> READ . LPAREN exp_var agregar_cuad_read lectura2

    LPAREN          shift and go to state 94


state 65

    (59) escritura -> WRITE . LPAREN escritura2 RPAREN SEMICOLON

    LPAREN          shift and go to state 95


state 66

    (64) desicion -> IF . LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (65) desicion -> IF . LPAREN expresion RPAREN agregar_cuad_if THEN bloque else

    LPAREN          shift and go to state 96


state 67

    (70) repeticion -> condicional .

    ID              reduce using rule 70 (repeticion -> condicional .)
    RETURN          reduce using rule 70 (repeticion -> condicional .)
    READ            reduce using rule 70 (repeticion -> condicional .)
    WRITE           reduce using rule 70 (repeticion -> condicional .)
    IF              reduce using rule 70 (repeticion -> condicional .)
    COLOR           reduce using rule 70 (repeticion -> condicional .)
    WHILE           reduce using rule 70 (repeticion -> condicional .)
    FOR             reduce using rule 70 (repeticion -> condicional .)
    LINE            reduce using rule 70 (repeticion -> condicional .)
    POINT           reduce using rule 70 (repeticion -> condicional .)
    CIRCLE          reduce using rule 70 (repeticion -> condicional .)
    ARCUP           reduce using rule 70 (repeticion -> condicional .)
    ARCDOWN         reduce using rule 70 (repeticion -> condicional .)
    SETX            reduce using rule 70 (repeticion -> condicional .)
    SETY            reduce using rule 70 (repeticion -> condicional .)
    RIGHT           reduce using rule 70 (repeticion -> condicional .)
    LEFT            reduce using rule 70 (repeticion -> condicional .)
    PENSIZE         reduce using rule 70 (repeticion -> condicional .)
    PENUP           reduce using rule 70 (repeticion -> condicional .)
    PENDOWN         reduce using rule 70 (repeticion -> condicional .)
    CLEAR           reduce using rule 70 (repeticion -> condicional .)
    RBRACKET        reduce using rule 70 (repeticion -> condicional .)


state 68

    (71) repeticion -> no_condicional .

    ID              reduce using rule 71 (repeticion -> no_condicional .)
    RETURN          reduce using rule 71 (repeticion -> no_condicional .)
    READ            reduce using rule 71 (repeticion -> no_condicional .)
    WRITE           reduce using rule 71 (repeticion -> no_condicional .)
    IF              reduce using rule 71 (repeticion -> no_condicional .)
    COLOR           reduce using rule 71 (repeticion -> no_condicional .)
    WHILE           reduce using rule 71 (repeticion -> no_condicional .)
    FOR             reduce using rule 71 (repeticion -> no_condicional .)
    LINE            reduce using rule 71 (repeticion -> no_condicional .)
    POINT           reduce using rule 71 (repeticion -> no_condicional .)
    CIRCLE          reduce using rule 71 (repeticion -> no_condicional .)
    ARCUP           reduce using rule 71 (repeticion -> no_condicional .)
    ARCDOWN         reduce using rule 71 (repeticion -> no_condicional .)
    SETX            reduce using rule 71 (repeticion -> no_condicional .)
    SETY            reduce using rule 71 (repeticion -> no_condicional .)
    RIGHT           reduce using rule 71 (repeticion -> no_condicional .)
    LEFT            reduce using rule 71 (repeticion -> no_condicional .)
    PENSIZE         reduce using rule 71 (repeticion -> no_condicional .)
    PENUP           reduce using rule 71 (repeticion -> no_condicional .)
    PENDOWN         reduce using rule 71 (repeticion -> no_condicional .)
    CLEAR           reduce using rule 71 (repeticion -> no_condicional .)
    RBRACKET        reduce using rule 71 (repeticion -> no_condicional .)


state 69

    (41) func_esp -> func_esp_name_param . LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    LPAREN          shift and go to state 97


state 70

    (42) func_esp -> func_esp_name_no_param . LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON

    LPAREN          shift and go to state 98


state 71

    (43) func_esp -> COLOR . agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 99
    empty                          shift and go to state 100

state 72

    (72) condicional -> WHILE . agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (121) agregar_while -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_while                  shift and go to state 101
    empty                          shift and go to state 102

state 73

    (73) no_condicional -> FOR . ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque

    ID              shift and go to state 103


state 74

    (46) func_esp_name_param -> LINE . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 104
    empty                          shift and go to state 100

state 75

    (47) func_esp_name_param -> POINT . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 105
    empty                          shift and go to state 100

state 76

    (48) func_esp_name_param -> CIRCLE . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 106
    empty                          shift and go to state 100

state 77

    (49) func_esp_name_param -> ARCUP . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 107
    empty                          shift and go to state 100

state 78

    (50) func_esp_name_param -> ARCDOWN . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 108
    empty                          shift and go to state 100

state 79

    (51) func_esp_name_param -> SETX . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 109
    empty                          shift and go to state 100

state 80

    (52) func_esp_name_param -> SETY . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 110
    empty                          shift and go to state 100

state 81

    (53) func_esp_name_param -> RIGHT . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 111
    empty                          shift and go to state 100

state 82

    (54) func_esp_name_param -> LEFT . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 112
    empty                          shift and go to state 100

state 83

    (55) func_esp_name_param -> PENSIZE . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 113
    empty                          shift and go to state 100

state 84

    (56) func_esp_name_no_param -> PENUP . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 114
    empty                          shift and go to state 100

state 85

    (57) func_esp_name_no_param -> PENDOWN . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 115
    empty                          shift and go to state 100

state 86

    (58) func_esp_name_no_param -> CLEAR . agregar_esp_func
    (127) agregar_esp_func -> . empty
    (100) empty -> .

    LPAREN          reduce using rule 100 (empty -> .)

    agregar_esp_func               shift and go to state 116
    empty                          shift and go to state 100

state 87

    (18) funs2 -> MODULE ID agregar_funs LPAREN . parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN . parametros RPAREN vars bloque finalizar_funs funs
    (20) parametros -> . tipo ID agregar_param COMA parametros
    (21) parametros -> . tipo ID agregar_param
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    parametros                     shift and go to state 117
    tipo                           shift and go to state 118

state 88

    (22) bloque -> LBRACKET bloque1 RBRACKET .

    $end            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    FUNC            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    MAIN            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    ELSE            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    ID              reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    RETURN          reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    READ            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    WRITE           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    IF              reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    COLOR           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    WHILE           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    FOR             reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    LINE            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    POINT           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    CIRCLE          reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    ARCUP           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    ARCDOWN         reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    SETX            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    SETY            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    RIGHT           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    LEFT            reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENSIZE         reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENUP           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENDOWN         reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    CLEAR           reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)
    RBRACKET        reduce using rule 22 (bloque -> LBRACKET bloque1 RBRACKET .)


state 89

    (24) bloque1 -> estatuto bloque1 .

    RBRACKET        reduce using rule 24 (bloque1 -> estatuto bloque1 .)


state 90

    (34) asignacion -> exp_var EQUALS . agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 119
    empty                          shift and go to state 120

state 91

    (35) modulo_v -> ID agregar_cuad_era . LPAREN e RPAREN fin_func SEMICOLON
    (36) modulo_v -> ID agregar_cuad_era . LPAREN RPAREN fin_func SEMICOLON

    LPAREN          shift and go to state 121


state 92

    (124) agregar_cuad_era -> empty .

    LPAREN          reduce using rule 124 (agregar_cuad_era -> empty .)


state 93

    (37) return -> RETURN LPAREN . exp RPAREN SEMICOLON
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 123
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 94

    (38) lectura -> READ LPAREN . exp_var agregar_cuad_read lectura2
    (99) exp_var -> . ID

    ID              shift and go to state 137

    exp_var                        shift and go to state 136

state 95

    (59) escritura -> WRITE LPAREN . escritura2 RPAREN SEMICOLON
    (60) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (61) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (62) escritura2 -> . expresion agregar_cuad_print_exp
    (63) escritura2 -> . STRING agregar_cuad_print_str
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    STRING          shift and go to state 140
    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    escritura2                     shift and go to state 138
    expresion                      shift and go to state 139
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 96

    (64) desicion -> IF LPAREN . expresion RPAREN agregar_cuad_if THEN bloque
    (65) desicion -> IF LPAREN . expresion RPAREN agregar_cuad_if THEN bloque else
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    expresion                      shift and go to state 144
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 97

    (41) func_esp -> func_esp_name_param LPAREN . exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 145
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 98

    (42) func_esp -> func_esp_name_no_param LPAREN . RPAREN agregar_cuad_esp_no_param_func SEMICOLON

    RPAREN          shift and go to state 146


state 99

    (43) func_esp -> COLOR agregar_esp_func . LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    LPAREN          shift and go to state 147


state 100

    (127) agregar_esp_func -> empty .

    LPAREN          reduce using rule 127 (agregar_esp_func -> empty .)


state 101

    (72) condicional -> WHILE agregar_while . LPAREN expresion RPAREN agregar_while_cond DO bloque

    LPAREN          shift and go to state 148


state 102

    (121) agregar_while -> empty .

    LPAREN          reduce using rule 121 (agregar_while -> empty .)


state 103

    (73) no_condicional -> FOR ID . agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (118) agregar_for_var -> . empty
    (100) empty -> .

    EQUALS          reduce using rule 100 (empty -> .)

    agregar_for_var                shift and go to state 149
    empty                          shift and go to state 150

state 104

    (46) func_esp_name_param -> LINE agregar_esp_func .

    LPAREN          reduce using rule 46 (func_esp_name_param -> LINE agregar_esp_func .)


state 105

    (47) func_esp_name_param -> POINT agregar_esp_func .

    LPAREN          reduce using rule 47 (func_esp_name_param -> POINT agregar_esp_func .)


state 106

    (48) func_esp_name_param -> CIRCLE agregar_esp_func .

    LPAREN          reduce using rule 48 (func_esp_name_param -> CIRCLE agregar_esp_func .)


state 107

    (49) func_esp_name_param -> ARCUP agregar_esp_func .

    LPAREN          reduce using rule 49 (func_esp_name_param -> ARCUP agregar_esp_func .)


state 108

    (50) func_esp_name_param -> ARCDOWN agregar_esp_func .

    LPAREN          reduce using rule 50 (func_esp_name_param -> ARCDOWN agregar_esp_func .)


state 109

    (51) func_esp_name_param -> SETX agregar_esp_func .

    LPAREN          reduce using rule 51 (func_esp_name_param -> SETX agregar_esp_func .)


state 110

    (52) func_esp_name_param -> SETY agregar_esp_func .

    LPAREN          reduce using rule 52 (func_esp_name_param -> SETY agregar_esp_func .)


state 111

    (53) func_esp_name_param -> RIGHT agregar_esp_func .

    LPAREN          reduce using rule 53 (func_esp_name_param -> RIGHT agregar_esp_func .)


state 112

    (54) func_esp_name_param -> LEFT agregar_esp_func .

    LPAREN          reduce using rule 54 (func_esp_name_param -> LEFT agregar_esp_func .)


state 113

    (55) func_esp_name_param -> PENSIZE agregar_esp_func .

    LPAREN          reduce using rule 55 (func_esp_name_param -> PENSIZE agregar_esp_func .)


state 114

    (56) func_esp_name_no_param -> PENUP agregar_esp_func .

    LPAREN          reduce using rule 56 (func_esp_name_no_param -> PENUP agregar_esp_func .)


state 115

    (57) func_esp_name_no_param -> PENDOWN agregar_esp_func .

    LPAREN          reduce using rule 57 (func_esp_name_no_param -> PENDOWN agregar_esp_func .)


state 116

    (58) func_esp_name_no_param -> CLEAR agregar_esp_func .

    LPAREN          reduce using rule 58 (func_esp_name_no_param -> CLEAR agregar_esp_func .)


state 117

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros . RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros . RPAREN vars bloque finalizar_funs funs

    RPAREN          shift and go to state 151


state 118

    (20) parametros -> tipo . ID agregar_param COMA parametros
    (21) parametros -> tipo . ID agregar_param

    ID              shift and go to state 152


state 119

    (34) asignacion -> exp_var EQUALS agregar_exp_op . expresion SEMICOLON agregar_cuad_asign
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    SEMICOLON       reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp_var                        shift and go to state 131
    expresion                      shift and go to state 153
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130

state 120

    (103) agregar_exp_op -> empty .

    PLUS            reduce using rule 103 (agregar_exp_op -> empty .)
    MINUS           reduce using rule 103 (agregar_exp_op -> empty .)
    LPAREN          reduce using rule 103 (agregar_exp_op -> empty .)
    ID              reduce using rule 103 (agregar_exp_op -> empty .)
    INT             reduce using rule 103 (agregar_exp_op -> empty .)
    FLOAT           reduce using rule 103 (agregar_exp_op -> empty .)
    CHAR            reduce using rule 103 (agregar_exp_op -> empty .)
    SEMICOLON       reduce using rule 103 (agregar_exp_op -> empty .)
    RPAREN          reduce using rule 103 (agregar_exp_op -> empty .)


state 121

    (35) modulo_v -> ID agregar_cuad_era LPAREN . e RPAREN fin_func SEMICOLON
    (36) modulo_v -> ID agregar_cuad_era LPAREN . RPAREN fin_func SEMICOLON
    (44) e -> . exp agregar_param_check COMA e
    (45) e -> . exp agregar_param_check
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    RPAREN          shift and go to state 155
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    e                              shift and go to state 154
    exp                            shift and go to state 156
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 122

    (97) factor_paren -> LPAREN . agregar_exp_op expresion RPAREN
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 157
    empty                          shift and go to state 120

state 123

    (37) return -> RETURN LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 158


state 124

    (85) exp -> termino . agregar_cuad_arith
    (86) exp -> termino . agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> termino . agregar_cuad_arith MINUS agregar_exp_op exp
    (110) agregar_cuad_arith -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    MRTHAN          reduce using rule 100 (empty -> .)
    LSTHAN          reduce using rule 100 (empty -> .)
    LSETHAN         reduce using rule 100 (empty -> .)
    MRETHAN         reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    NOT_EQUALS      reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMA            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    DO              reduce using rule 100 (empty -> .)

    agregar_cuad_arith             shift and go to state 159
    empty                          shift and go to state 160

state 125

    (92) factor -> PLUS . var_cte
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR

    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    var_cte                        shift and go to state 161

state 126

    (93) factor -> MINUS . var_cte
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR

    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    var_cte                        shift and go to state 162

state 127

    (88) termino -> factor . agregar_cuad_factor
    (89) termino -> factor . agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> factor . agregar_cuad_factor DIVIDE agregar_exp_op termino
    (111) agregar_cuad_factor -> . empty
    (100) empty -> .

    TIMES           reduce using rule 100 (empty -> .)
    DIVIDE          reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    MRTHAN          reduce using rule 100 (empty -> .)
    LSTHAN          reduce using rule 100 (empty -> .)
    LSETHAN         reduce using rule 100 (empty -> .)
    MRETHAN         reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    NOT_EQUALS      reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMA            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    DO              reduce using rule 100 (empty -> .)

    agregar_cuad_factor            shift and go to state 163
    empty                          shift and go to state 164

state 128

    (91) factor -> factor_paren .

    TIMES           reduce using rule 91 (factor -> factor_paren .)
    DIVIDE          reduce using rule 91 (factor -> factor_paren .)
    PLUS            reduce using rule 91 (factor -> factor_paren .)
    MINUS           reduce using rule 91 (factor -> factor_paren .)
    RPAREN          reduce using rule 91 (factor -> factor_paren .)
    MRTHAN          reduce using rule 91 (factor -> factor_paren .)
    LSTHAN          reduce using rule 91 (factor -> factor_paren .)
    LSETHAN         reduce using rule 91 (factor -> factor_paren .)
    MRETHAN         reduce using rule 91 (factor -> factor_paren .)
    DOUBLE          reduce using rule 91 (factor -> factor_paren .)
    NOT_EQUALS      reduce using rule 91 (factor -> factor_paren .)
    AND             reduce using rule 91 (factor -> factor_paren .)
    OR              reduce using rule 91 (factor -> factor_paren .)
    COMA            reduce using rule 91 (factor -> factor_paren .)
    SEMICOLON       reduce using rule 91 (factor -> factor_paren .)
    TO              reduce using rule 91 (factor -> factor_paren .)
    DO              reduce using rule 91 (factor -> factor_paren .)


state 129

    (95) factor -> var_cte .

    TIMES           reduce using rule 95 (factor -> var_cte .)
    DIVIDE          reduce using rule 95 (factor -> var_cte .)
    PLUS            reduce using rule 95 (factor -> var_cte .)
    MINUS           reduce using rule 95 (factor -> var_cte .)
    RPAREN          reduce using rule 95 (factor -> var_cte .)
    MRTHAN          reduce using rule 95 (factor -> var_cte .)
    LSTHAN          reduce using rule 95 (factor -> var_cte .)
    LSETHAN         reduce using rule 95 (factor -> var_cte .)
    MRETHAN         reduce using rule 95 (factor -> var_cte .)
    DOUBLE          reduce using rule 95 (factor -> var_cte .)
    NOT_EQUALS      reduce using rule 95 (factor -> var_cte .)
    AND             reduce using rule 95 (factor -> var_cte .)
    OR              reduce using rule 95 (factor -> var_cte .)
    COMA            reduce using rule 95 (factor -> var_cte .)
    SEMICOLON       reduce using rule 95 (factor -> var_cte .)
    TO              reduce using rule 95 (factor -> var_cte .)
    DO              reduce using rule 95 (factor -> var_cte .)


state 130

    (94) factor -> return_func .

    TIMES           reduce using rule 94 (factor -> return_func .)
    DIVIDE          reduce using rule 94 (factor -> return_func .)
    PLUS            reduce using rule 94 (factor -> return_func .)
    MINUS           reduce using rule 94 (factor -> return_func .)
    RPAREN          reduce using rule 94 (factor -> return_func .)
    MRTHAN          reduce using rule 94 (factor -> return_func .)
    LSTHAN          reduce using rule 94 (factor -> return_func .)
    LSETHAN         reduce using rule 94 (factor -> return_func .)
    MRETHAN         reduce using rule 94 (factor -> return_func .)
    DOUBLE          reduce using rule 94 (factor -> return_func .)
    NOT_EQUALS      reduce using rule 94 (factor -> return_func .)
    AND             reduce using rule 94 (factor -> return_func .)
    OR              reduce using rule 94 (factor -> return_func .)
    COMA            reduce using rule 94 (factor -> return_func .)
    SEMICOLON       reduce using rule 94 (factor -> return_func .)
    TO              reduce using rule 94 (factor -> return_func .)
    DO              reduce using rule 94 (factor -> return_func .)


state 131

    (96) factor -> exp_var .

    TIMES           reduce using rule 96 (factor -> exp_var .)
    DIVIDE          reduce using rule 96 (factor -> exp_var .)
    PLUS            reduce using rule 96 (factor -> exp_var .)
    MINUS           reduce using rule 96 (factor -> exp_var .)
    RPAREN          reduce using rule 96 (factor -> exp_var .)
    MRTHAN          reduce using rule 96 (factor -> exp_var .)
    LSTHAN          reduce using rule 96 (factor -> exp_var .)
    LSETHAN         reduce using rule 96 (factor -> exp_var .)
    MRETHAN         reduce using rule 96 (factor -> exp_var .)
    DOUBLE          reduce using rule 96 (factor -> exp_var .)
    NOT_EQUALS      reduce using rule 96 (factor -> exp_var .)
    AND             reduce using rule 96 (factor -> exp_var .)
    OR              reduce using rule 96 (factor -> exp_var .)
    COMA            reduce using rule 96 (factor -> exp_var .)
    SEMICOLON       reduce using rule 96 (factor -> exp_var .)
    TO              reduce using rule 96 (factor -> exp_var .)
    DO              reduce using rule 96 (factor -> exp_var .)


state 132

    (98) return_func -> ID . agregar_cuad_era LPAREN e RPAREN fin_func
    (99) exp_var -> ID .
    (124) agregar_cuad_era -> . empty
    (100) empty -> .

    TIMES           reduce using rule 99 (exp_var -> ID .)
    DIVIDE          reduce using rule 99 (exp_var -> ID .)
    PLUS            reduce using rule 99 (exp_var -> ID .)
    MINUS           reduce using rule 99 (exp_var -> ID .)
    RPAREN          reduce using rule 99 (exp_var -> ID .)
    MRTHAN          reduce using rule 99 (exp_var -> ID .)
    LSTHAN          reduce using rule 99 (exp_var -> ID .)
    LSETHAN         reduce using rule 99 (exp_var -> ID .)
    MRETHAN         reduce using rule 99 (exp_var -> ID .)
    DOUBLE          reduce using rule 99 (exp_var -> ID .)
    NOT_EQUALS      reduce using rule 99 (exp_var -> ID .)
    AND             reduce using rule 99 (exp_var -> ID .)
    OR              reduce using rule 99 (exp_var -> ID .)
    COMA            reduce using rule 99 (exp_var -> ID .)
    SEMICOLON       reduce using rule 99 (exp_var -> ID .)
    TO              reduce using rule 99 (exp_var -> ID .)
    DO              reduce using rule 99 (exp_var -> ID .)
    LPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_era               shift and go to state 165
    empty                          shift and go to state 92

state 133

    (67) var_cte -> INT .

    TIMES           reduce using rule 67 (var_cte -> INT .)
    DIVIDE          reduce using rule 67 (var_cte -> INT .)
    PLUS            reduce using rule 67 (var_cte -> INT .)
    MINUS           reduce using rule 67 (var_cte -> INT .)
    RPAREN          reduce using rule 67 (var_cte -> INT .)
    MRTHAN          reduce using rule 67 (var_cte -> INT .)
    LSTHAN          reduce using rule 67 (var_cte -> INT .)
    LSETHAN         reduce using rule 67 (var_cte -> INT .)
    MRETHAN         reduce using rule 67 (var_cte -> INT .)
    DOUBLE          reduce using rule 67 (var_cte -> INT .)
    NOT_EQUALS      reduce using rule 67 (var_cte -> INT .)
    AND             reduce using rule 67 (var_cte -> INT .)
    OR              reduce using rule 67 (var_cte -> INT .)
    COMA            reduce using rule 67 (var_cte -> INT .)
    SEMICOLON       reduce using rule 67 (var_cte -> INT .)
    TO              reduce using rule 67 (var_cte -> INT .)
    DO              reduce using rule 67 (var_cte -> INT .)


state 134

    (68) var_cte -> FLOAT .

    TIMES           reduce using rule 68 (var_cte -> FLOAT .)
    DIVIDE          reduce using rule 68 (var_cte -> FLOAT .)
    PLUS            reduce using rule 68 (var_cte -> FLOAT .)
    MINUS           reduce using rule 68 (var_cte -> FLOAT .)
    RPAREN          reduce using rule 68 (var_cte -> FLOAT .)
    MRTHAN          reduce using rule 68 (var_cte -> FLOAT .)
    LSTHAN          reduce using rule 68 (var_cte -> FLOAT .)
    LSETHAN         reduce using rule 68 (var_cte -> FLOAT .)
    MRETHAN         reduce using rule 68 (var_cte -> FLOAT .)
    DOUBLE          reduce using rule 68 (var_cte -> FLOAT .)
    NOT_EQUALS      reduce using rule 68 (var_cte -> FLOAT .)
    AND             reduce using rule 68 (var_cte -> FLOAT .)
    OR              reduce using rule 68 (var_cte -> FLOAT .)
    COMA            reduce using rule 68 (var_cte -> FLOAT .)
    SEMICOLON       reduce using rule 68 (var_cte -> FLOAT .)
    TO              reduce using rule 68 (var_cte -> FLOAT .)
    DO              reduce using rule 68 (var_cte -> FLOAT .)


state 135

    (69) var_cte -> CHAR .

    TIMES           reduce using rule 69 (var_cte -> CHAR .)
    DIVIDE          reduce using rule 69 (var_cte -> CHAR .)
    PLUS            reduce using rule 69 (var_cte -> CHAR .)
    MINUS           reduce using rule 69 (var_cte -> CHAR .)
    RPAREN          reduce using rule 69 (var_cte -> CHAR .)
    MRTHAN          reduce using rule 69 (var_cte -> CHAR .)
    LSTHAN          reduce using rule 69 (var_cte -> CHAR .)
    LSETHAN         reduce using rule 69 (var_cte -> CHAR .)
    MRETHAN         reduce using rule 69 (var_cte -> CHAR .)
    DOUBLE          reduce using rule 69 (var_cte -> CHAR .)
    NOT_EQUALS      reduce using rule 69 (var_cte -> CHAR .)
    AND             reduce using rule 69 (var_cte -> CHAR .)
    OR              reduce using rule 69 (var_cte -> CHAR .)
    COMA            reduce using rule 69 (var_cte -> CHAR .)
    SEMICOLON       reduce using rule 69 (var_cte -> CHAR .)
    TO              reduce using rule 69 (var_cte -> CHAR .)
    DO              reduce using rule 69 (var_cte -> CHAR .)


state 136

    (38) lectura -> READ LPAREN exp_var . agregar_cuad_read lectura2
    (113) agregar_cuad_read -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_read              shift and go to state 166
    empty                          shift and go to state 167

state 137

    (99) exp_var -> ID .

    COMA            reduce using rule 99 (exp_var -> ID .)
    RPAREN          reduce using rule 99 (exp_var -> ID .)


state 138

    (59) escritura -> WRITE LPAREN escritura2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 168


state 139

    (60) escritura2 -> expresion . agregar_cuad_print_exp COMA escritura2
    (62) escritura2 -> expresion . agregar_cuad_print_exp
    (115) agregar_cuad_print_exp -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_print_exp         shift and go to state 169
    empty                          shift and go to state 170

state 140

    (61) escritura2 -> STRING . agregar_cuad_print_str COMA escritura2
    (63) escritura2 -> STRING . agregar_cuad_print_str
    (114) agregar_cuad_print_str -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_print_str         shift and go to state 171
    empty                          shift and go to state 172

state 141

    (74) expresion -> exp_log . agregar_cuad_log
    (75) expresion -> exp_log . agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> exp_log . agregar_cuad_log OR agregar_exp_op exp_log
    (108) agregar_cuad_log -> . empty
    (100) empty -> .

    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_log               shift and go to state 173
    empty                          shift and go to state 174

state 142

    (77) expresion -> empty .

    COMA            reduce using rule 77 (expresion -> empty .)
    RPAREN          reduce using rule 77 (expresion -> empty .)
    SEMICOLON       reduce using rule 77 (expresion -> empty .)


state 143

    (78) exp_log -> exp . agregar_cuad_comp
    (79) exp_log -> exp . agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> exp . agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> exp . agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> exp . agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> exp . agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> exp . agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (109) agregar_cuad_comp -> . empty
    (100) empty -> .

    MRTHAN          reduce using rule 100 (empty -> .)
    LSTHAN          reduce using rule 100 (empty -> .)
    LSETHAN         reduce using rule 100 (empty -> .)
    MRETHAN         reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    NOT_EQUALS      reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_comp              shift and go to state 175
    empty                          shift and go to state 176

state 144

    (64) desicion -> IF LPAREN expresion . RPAREN agregar_cuad_if THEN bloque
    (65) desicion -> IF LPAREN expresion . RPAREN agregar_cuad_if THEN bloque else

    RPAREN          shift and go to state 177


state 145

    (41) func_esp -> func_esp_name_param LPAREN exp . RPAREN agregar_cuad_esp_param_func SEMICOLON

    RPAREN          shift and go to state 178


state 146

    (42) func_esp -> func_esp_name_no_param LPAREN RPAREN . agregar_cuad_esp_no_param_func SEMICOLON
    (129) agregar_cuad_esp_no_param_func -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_esp_no_param_func shift and go to state 179
    empty                          shift and go to state 180

state 147

    (43) func_esp -> COLOR agregar_esp_func LPAREN . exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 181
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 148

    (72) condicional -> WHILE agregar_while LPAREN . expresion RPAREN agregar_while_cond DO bloque
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    expresion                      shift and go to state 182
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 149

    (73) no_condicional -> FOR ID agregar_for_var . EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque

    EQUALS          shift and go to state 183


state 150

    (118) agregar_for_var -> empty .

    EQUALS          reduce using rule 118 (agregar_for_var -> empty .)


state 151

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN . vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN . vars bloque finalizar_funs funs
    (4) vars -> . VAR vars2
    (5) vars -> . empty
    (100) empty -> .

    VAR             shift and go to state 9
    LBRACKET        reduce using rule 100 (empty -> .)

    vars                           shift and go to state 184
    empty                          shift and go to state 10

state 152

    (20) parametros -> tipo ID . agregar_param COMA parametros
    (21) parametros -> tipo ID . agregar_param
    (102) agregar_param -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_param                  shift and go to state 185
    empty                          shift and go to state 186

state 153

    (34) asignacion -> exp_var EQUALS agregar_exp_op expresion . SEMICOLON agregar_cuad_asign

    SEMICOLON       shift and go to state 187


state 154

    (35) modulo_v -> ID agregar_cuad_era LPAREN e . RPAREN fin_func SEMICOLON

    RPAREN          shift and go to state 188


state 155

    (36) modulo_v -> ID agregar_cuad_era LPAREN RPAREN . fin_func SEMICOLON
    (126) fin_func -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    fin_func                       shift and go to state 189
    empty                          shift and go to state 190

state 156

    (44) e -> exp . agregar_param_check COMA e
    (45) e -> exp . agregar_param_check
    (125) agregar_param_check -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_param_check            shift and go to state 191
    empty                          shift and go to state 192

state 157

    (97) factor_paren -> LPAREN agregar_exp_op . expresion RPAREN
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    expresion                      shift and go to state 193
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 158

    (37) return -> RETURN LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 194


state 159

    (85) exp -> termino agregar_cuad_arith .
    (86) exp -> termino agregar_cuad_arith . PLUS agregar_exp_op exp
    (87) exp -> termino agregar_cuad_arith . MINUS agregar_exp_op exp

    RPAREN          reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    MRTHAN          reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    LSTHAN          reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    LSETHAN         reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    MRETHAN         reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    DOUBLE          reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    NOT_EQUALS      reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    AND             reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    OR              reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    COMA            reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    SEMICOLON       reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    TO              reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    DO              reduce using rule 85 (exp -> termino agregar_cuad_arith .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196


state 160

    (110) agregar_cuad_arith -> empty .

    PLUS            reduce using rule 110 (agregar_cuad_arith -> empty .)
    MINUS           reduce using rule 110 (agregar_cuad_arith -> empty .)
    RPAREN          reduce using rule 110 (agregar_cuad_arith -> empty .)
    MRTHAN          reduce using rule 110 (agregar_cuad_arith -> empty .)
    LSTHAN          reduce using rule 110 (agregar_cuad_arith -> empty .)
    LSETHAN         reduce using rule 110 (agregar_cuad_arith -> empty .)
    MRETHAN         reduce using rule 110 (agregar_cuad_arith -> empty .)
    DOUBLE          reduce using rule 110 (agregar_cuad_arith -> empty .)
    NOT_EQUALS      reduce using rule 110 (agregar_cuad_arith -> empty .)
    AND             reduce using rule 110 (agregar_cuad_arith -> empty .)
    OR              reduce using rule 110 (agregar_cuad_arith -> empty .)
    COMA            reduce using rule 110 (agregar_cuad_arith -> empty .)
    SEMICOLON       reduce using rule 110 (agregar_cuad_arith -> empty .)
    TO              reduce using rule 110 (agregar_cuad_arith -> empty .)
    DO              reduce using rule 110 (agregar_cuad_arith -> empty .)


state 161

    (92) factor -> PLUS var_cte .

    TIMES           reduce using rule 92 (factor -> PLUS var_cte .)
    DIVIDE          reduce using rule 92 (factor -> PLUS var_cte .)
    PLUS            reduce using rule 92 (factor -> PLUS var_cte .)
    MINUS           reduce using rule 92 (factor -> PLUS var_cte .)
    RPAREN          reduce using rule 92 (factor -> PLUS var_cte .)
    MRTHAN          reduce using rule 92 (factor -> PLUS var_cte .)
    LSTHAN          reduce using rule 92 (factor -> PLUS var_cte .)
    LSETHAN         reduce using rule 92 (factor -> PLUS var_cte .)
    MRETHAN         reduce using rule 92 (factor -> PLUS var_cte .)
    DOUBLE          reduce using rule 92 (factor -> PLUS var_cte .)
    NOT_EQUALS      reduce using rule 92 (factor -> PLUS var_cte .)
    AND             reduce using rule 92 (factor -> PLUS var_cte .)
    OR              reduce using rule 92 (factor -> PLUS var_cte .)
    COMA            reduce using rule 92 (factor -> PLUS var_cte .)
    SEMICOLON       reduce using rule 92 (factor -> PLUS var_cte .)
    TO              reduce using rule 92 (factor -> PLUS var_cte .)
    DO              reduce using rule 92 (factor -> PLUS var_cte .)


state 162

    (93) factor -> MINUS var_cte .

    TIMES           reduce using rule 93 (factor -> MINUS var_cte .)
    DIVIDE          reduce using rule 93 (factor -> MINUS var_cte .)
    PLUS            reduce using rule 93 (factor -> MINUS var_cte .)
    MINUS           reduce using rule 93 (factor -> MINUS var_cte .)
    RPAREN          reduce using rule 93 (factor -> MINUS var_cte .)
    MRTHAN          reduce using rule 93 (factor -> MINUS var_cte .)
    LSTHAN          reduce using rule 93 (factor -> MINUS var_cte .)
    LSETHAN         reduce using rule 93 (factor -> MINUS var_cte .)
    MRETHAN         reduce using rule 93 (factor -> MINUS var_cte .)
    DOUBLE          reduce using rule 93 (factor -> MINUS var_cte .)
    NOT_EQUALS      reduce using rule 93 (factor -> MINUS var_cte .)
    AND             reduce using rule 93 (factor -> MINUS var_cte .)
    OR              reduce using rule 93 (factor -> MINUS var_cte .)
    COMA            reduce using rule 93 (factor -> MINUS var_cte .)
    SEMICOLON       reduce using rule 93 (factor -> MINUS var_cte .)
    TO              reduce using rule 93 (factor -> MINUS var_cte .)
    DO              reduce using rule 93 (factor -> MINUS var_cte .)


state 163

    (88) termino -> factor agregar_cuad_factor .
    (89) termino -> factor agregar_cuad_factor . TIMES agregar_exp_op termino
    (90) termino -> factor agregar_cuad_factor . DIVIDE agregar_exp_op termino

    PLUS            reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    MINUS           reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    RPAREN          reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    MRTHAN          reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    LSTHAN          reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    LSETHAN         reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    MRETHAN         reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    DOUBLE          reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    NOT_EQUALS      reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    AND             reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    OR              reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    COMA            reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    SEMICOLON       reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    TO              reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    DO              reduce using rule 88 (termino -> factor agregar_cuad_factor .)
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198


state 164

    (111) agregar_cuad_factor -> empty .

    TIMES           reduce using rule 111 (agregar_cuad_factor -> empty .)
    DIVIDE          reduce using rule 111 (agregar_cuad_factor -> empty .)
    PLUS            reduce using rule 111 (agregar_cuad_factor -> empty .)
    MINUS           reduce using rule 111 (agregar_cuad_factor -> empty .)
    RPAREN          reduce using rule 111 (agregar_cuad_factor -> empty .)
    MRTHAN          reduce using rule 111 (agregar_cuad_factor -> empty .)
    LSTHAN          reduce using rule 111 (agregar_cuad_factor -> empty .)
    LSETHAN         reduce using rule 111 (agregar_cuad_factor -> empty .)
    MRETHAN         reduce using rule 111 (agregar_cuad_factor -> empty .)
    DOUBLE          reduce using rule 111 (agregar_cuad_factor -> empty .)
    NOT_EQUALS      reduce using rule 111 (agregar_cuad_factor -> empty .)
    AND             reduce using rule 111 (agregar_cuad_factor -> empty .)
    OR              reduce using rule 111 (agregar_cuad_factor -> empty .)
    COMA            reduce using rule 111 (agregar_cuad_factor -> empty .)
    SEMICOLON       reduce using rule 111 (agregar_cuad_factor -> empty .)
    TO              reduce using rule 111 (agregar_cuad_factor -> empty .)
    DO              reduce using rule 111 (agregar_cuad_factor -> empty .)


state 165

    (98) return_func -> ID agregar_cuad_era . LPAREN e RPAREN fin_func

    LPAREN          shift and go to state 199


state 166

    (38) lectura -> READ LPAREN exp_var agregar_cuad_read . lectura2
    (39) lectura2 -> . COMA exp_var agregar_cuad_read lectura2
    (40) lectura2 -> . RPAREN SEMICOLON

    COMA            shift and go to state 201
    RPAREN          shift and go to state 202

    lectura2                       shift and go to state 200

state 167

    (113) agregar_cuad_read -> empty .

    COMA            reduce using rule 113 (agregar_cuad_read -> empty .)
    RPAREN          reduce using rule 113 (agregar_cuad_read -> empty .)


state 168

    (59) escritura -> WRITE LPAREN escritura2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 203


state 169

    (60) escritura2 -> expresion agregar_cuad_print_exp . COMA escritura2
    (62) escritura2 -> expresion agregar_cuad_print_exp .

    COMA            shift and go to state 204
    RPAREN          reduce using rule 62 (escritura2 -> expresion agregar_cuad_print_exp .)


state 170

    (115) agregar_cuad_print_exp -> empty .

    COMA            reduce using rule 115 (agregar_cuad_print_exp -> empty .)
    RPAREN          reduce using rule 115 (agregar_cuad_print_exp -> empty .)


state 171

    (61) escritura2 -> STRING agregar_cuad_print_str . COMA escritura2
    (63) escritura2 -> STRING agregar_cuad_print_str .

    COMA            shift and go to state 205
    RPAREN          reduce using rule 63 (escritura2 -> STRING agregar_cuad_print_str .)


state 172

    (114) agregar_cuad_print_str -> empty .

    COMA            reduce using rule 114 (agregar_cuad_print_str -> empty .)
    RPAREN          reduce using rule 114 (agregar_cuad_print_str -> empty .)


state 173

    (74) expresion -> exp_log agregar_cuad_log .
    (75) expresion -> exp_log agregar_cuad_log . AND agregar_exp_op exp_log
    (76) expresion -> exp_log agregar_cuad_log . OR agregar_exp_op exp_log

    COMA            reduce using rule 74 (expresion -> exp_log agregar_cuad_log .)
    RPAREN          reduce using rule 74 (expresion -> exp_log agregar_cuad_log .)
    SEMICOLON       reduce using rule 74 (expresion -> exp_log agregar_cuad_log .)
    AND             shift and go to state 206
    OR              shift and go to state 207


state 174

    (108) agregar_cuad_log -> empty .

    AND             reduce using rule 108 (agregar_cuad_log -> empty .)
    OR              reduce using rule 108 (agregar_cuad_log -> empty .)
    COMA            reduce using rule 108 (agregar_cuad_log -> empty .)
    RPAREN          reduce using rule 108 (agregar_cuad_log -> empty .)
    SEMICOLON       reduce using rule 108 (agregar_cuad_log -> empty .)


state 175

    (78) exp_log -> exp agregar_cuad_comp .
    (79) exp_log -> exp agregar_cuad_comp . MRTHAN agregar_exp_op exp_log
    (80) exp_log -> exp agregar_cuad_comp . LSTHAN agregar_exp_op exp_log
    (81) exp_log -> exp agregar_cuad_comp . LSETHAN agregar_exp_op exp_log
    (82) exp_log -> exp agregar_cuad_comp . MRETHAN agregar_exp_op exp_log
    (83) exp_log -> exp agregar_cuad_comp . DOUBLE agregar_exp_op exp_log
    (84) exp_log -> exp agregar_cuad_comp . NOT_EQUALS agregar_exp_op exp_log

    AND             reduce using rule 78 (exp_log -> exp agregar_cuad_comp .)
    OR              reduce using rule 78 (exp_log -> exp agregar_cuad_comp .)
    COMA            reduce using rule 78 (exp_log -> exp agregar_cuad_comp .)
    RPAREN          reduce using rule 78 (exp_log -> exp agregar_cuad_comp .)
    SEMICOLON       reduce using rule 78 (exp_log -> exp agregar_cuad_comp .)
    MRTHAN          shift and go to state 208
    LSTHAN          shift and go to state 209
    LSETHAN         shift and go to state 210
    MRETHAN         shift and go to state 211
    DOUBLE          shift and go to state 212
    NOT_EQUALS      shift and go to state 213


state 176

    (109) agregar_cuad_comp -> empty .

    MRTHAN          reduce using rule 109 (agregar_cuad_comp -> empty .)
    LSTHAN          reduce using rule 109 (agregar_cuad_comp -> empty .)
    LSETHAN         reduce using rule 109 (agregar_cuad_comp -> empty .)
    MRETHAN         reduce using rule 109 (agregar_cuad_comp -> empty .)
    DOUBLE          reduce using rule 109 (agregar_cuad_comp -> empty .)
    NOT_EQUALS      reduce using rule 109 (agregar_cuad_comp -> empty .)
    AND             reduce using rule 109 (agregar_cuad_comp -> empty .)
    OR              reduce using rule 109 (agregar_cuad_comp -> empty .)
    COMA            reduce using rule 109 (agregar_cuad_comp -> empty .)
    RPAREN          reduce using rule 109 (agregar_cuad_comp -> empty .)
    SEMICOLON       reduce using rule 109 (agregar_cuad_comp -> empty .)


state 177

    (64) desicion -> IF LPAREN expresion RPAREN . agregar_cuad_if THEN bloque
    (65) desicion -> IF LPAREN expresion RPAREN . agregar_cuad_if THEN bloque else
    (116) agregar_cuad_if -> . empty
    (100) empty -> .

    THEN            reduce using rule 100 (empty -> .)

    agregar_cuad_if                shift and go to state 214
    empty                          shift and go to state 215

state 178

    (41) func_esp -> func_esp_name_param LPAREN exp RPAREN . agregar_cuad_esp_param_func SEMICOLON
    (128) agregar_cuad_esp_param_func -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_esp_param_func    shift and go to state 216
    empty                          shift and go to state 217

state 179

    (42) func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func . SEMICOLON

    SEMICOLON       shift and go to state 218


state 180

    (129) agregar_cuad_esp_no_param_func -> empty .

    SEMICOLON       reduce using rule 129 (agregar_cuad_esp_no_param_func -> empty .)


state 181

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp . COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    COMA            shift and go to state 219


state 182

    (72) condicional -> WHILE agregar_while LPAREN expresion . RPAREN agregar_while_cond DO bloque

    RPAREN          shift and go to state 220


state 183

    (73) no_condicional -> FOR ID agregar_for_var EQUALS . exp igualar_for_var TO exp agregar_for_cond DO bloque
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 221
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 184

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars . bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars . bloque finalizar_funs funs
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 222

state 185

    (20) parametros -> tipo ID agregar_param . COMA parametros
    (21) parametros -> tipo ID agregar_param .

    COMA            shift and go to state 223
    RPAREN          reduce using rule 21 (parametros -> tipo ID agregar_param .)


state 186

    (102) agregar_param -> empty .

    COMA            reduce using rule 102 (agregar_param -> empty .)
    RPAREN          reduce using rule 102 (agregar_param -> empty .)


state 187

    (34) asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON . agregar_cuad_asign
    (112) agregar_cuad_asign -> . empty
    (100) empty -> .

    ID              reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    READ            reduce using rule 100 (empty -> .)
    WRITE           reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    COLOR           reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    LINE            reduce using rule 100 (empty -> .)
    POINT           reduce using rule 100 (empty -> .)
    CIRCLE          reduce using rule 100 (empty -> .)
    ARCUP           reduce using rule 100 (empty -> .)
    ARCDOWN         reduce using rule 100 (empty -> .)
    SETX            reduce using rule 100 (empty -> .)
    SETY            reduce using rule 100 (empty -> .)
    RIGHT           reduce using rule 100 (empty -> .)
    LEFT            reduce using rule 100 (empty -> .)
    PENSIZE         reduce using rule 100 (empty -> .)
    PENUP           reduce using rule 100 (empty -> .)
    PENDOWN         reduce using rule 100 (empty -> .)
    CLEAR           reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)

    agregar_cuad_asign             shift and go to state 224
    empty                          shift and go to state 225

state 188

    (35) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN . fin_func SEMICOLON
    (126) fin_func -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    fin_func                       shift and go to state 226
    empty                          shift and go to state 190

state 189

    (36) modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func . SEMICOLON

    SEMICOLON       shift and go to state 227


state 190

    (126) fin_func -> empty .

    SEMICOLON       reduce using rule 126 (fin_func -> empty .)
    TIMES           reduce using rule 126 (fin_func -> empty .)
    DIVIDE          reduce using rule 126 (fin_func -> empty .)
    PLUS            reduce using rule 126 (fin_func -> empty .)
    MINUS           reduce using rule 126 (fin_func -> empty .)
    RPAREN          reduce using rule 126 (fin_func -> empty .)
    MRTHAN          reduce using rule 126 (fin_func -> empty .)
    LSTHAN          reduce using rule 126 (fin_func -> empty .)
    LSETHAN         reduce using rule 126 (fin_func -> empty .)
    MRETHAN         reduce using rule 126 (fin_func -> empty .)
    DOUBLE          reduce using rule 126 (fin_func -> empty .)
    NOT_EQUALS      reduce using rule 126 (fin_func -> empty .)
    AND             reduce using rule 126 (fin_func -> empty .)
    OR              reduce using rule 126 (fin_func -> empty .)
    COMA            reduce using rule 126 (fin_func -> empty .)
    TO              reduce using rule 126 (fin_func -> empty .)
    DO              reduce using rule 126 (fin_func -> empty .)


state 191

    (44) e -> exp agregar_param_check . COMA e
    (45) e -> exp agregar_param_check .

    COMA            shift and go to state 228
    RPAREN          reduce using rule 45 (e -> exp agregar_param_check .)


state 192

    (125) agregar_param_check -> empty .

    COMA            reduce using rule 125 (agregar_param_check -> empty .)
    RPAREN          reduce using rule 125 (agregar_param_check -> empty .)


state 193

    (97) factor_paren -> LPAREN agregar_exp_op expresion . RPAREN

    RPAREN          shift and go to state 229


state 194

    (37) return -> RETURN LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    READ            reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    WRITE           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    LINE            reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    POINT           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    ARCUP           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    SETX            reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    SETY            reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RIGHT           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    LEFT            reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENUP           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    CLEAR           reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 37 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)


state 195

    (86) exp -> termino agregar_cuad_arith PLUS . agregar_exp_op exp
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 230
    empty                          shift and go to state 120

state 196

    (87) exp -> termino agregar_cuad_arith MINUS . agregar_exp_op exp
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 231
    empty                          shift and go to state 120

state 197

    (89) termino -> factor agregar_cuad_factor TIMES . agregar_exp_op termino
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 232
    empty                          shift and go to state 120

state 198

    (90) termino -> factor agregar_cuad_factor DIVIDE . agregar_exp_op termino
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 233
    empty                          shift and go to state 120

state 199

    (98) return_func -> ID agregar_cuad_era LPAREN . e RPAREN fin_func
    (44) e -> . exp agregar_param_check COMA e
    (45) e -> . exp agregar_param_check
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    e                              shift and go to state 234
    exp                            shift and go to state 156
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 200

    (38) lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .

    ID              reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RETURN          reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    READ            reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    WRITE           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    IF              reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    COLOR           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    WHILE           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    FOR             reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    LINE            reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    POINT           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    CIRCLE          reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    ARCUP           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    ARCDOWN         reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    SETX            reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    SETY            reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RIGHT           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    LEFT            reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENSIZE         reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENUP           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENDOWN         reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    CLEAR           reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RBRACKET        reduce using rule 38 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)


state 201

    (39) lectura2 -> COMA . exp_var agregar_cuad_read lectura2
    (99) exp_var -> . ID

    ID              shift and go to state 137

    exp_var                        shift and go to state 235

state 202

    (40) lectura2 -> RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 236


state 203

    (59) escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .

    ID              reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    READ            reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    IF              reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    COLOR           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    FOR             reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    LINE            reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    POINT           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    ARCUP           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    SETX            reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    SETY            reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RIGHT           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    LEFT            reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENUP           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    CLEAR           reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 59 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)


state 204

    (60) escritura2 -> expresion agregar_cuad_print_exp COMA . escritura2
    (60) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (61) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (62) escritura2 -> . expresion agregar_cuad_print_exp
    (63) escritura2 -> . STRING agregar_cuad_print_str
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    STRING          shift and go to state 140
    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    expresion                      shift and go to state 139
    escritura2                     shift and go to state 237
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 205

    (61) escritura2 -> STRING agregar_cuad_print_str COMA . escritura2
    (60) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (61) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (62) escritura2 -> . expresion agregar_cuad_print_exp
    (63) escritura2 -> . STRING agregar_cuad_print_str
    (74) expresion -> . exp_log agregar_cuad_log
    (75) expresion -> . exp_log agregar_cuad_log AND agregar_exp_op exp_log
    (76) expresion -> . exp_log agregar_cuad_log OR agregar_exp_op exp_log
    (77) expresion -> . empty
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (100) empty -> .
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    STRING          shift and go to state 140
    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    escritura2                     shift and go to state 238
    expresion                      shift and go to state 139
    exp_log                        shift and go to state 141
    empty                          shift and go to state 142
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 206

    (75) expresion -> exp_log agregar_cuad_log AND . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 239
    empty                          shift and go to state 120

state 207

    (76) expresion -> exp_log agregar_cuad_log OR . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 240
    empty                          shift and go to state 120

state 208

    (79) exp_log -> exp agregar_cuad_comp MRTHAN . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 241
    empty                          shift and go to state 120

state 209

    (80) exp_log -> exp agregar_cuad_comp LSTHAN . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 242
    empty                          shift and go to state 120

state 210

    (81) exp_log -> exp agregar_cuad_comp LSETHAN . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 243
    empty                          shift and go to state 120

state 211

    (82) exp_log -> exp agregar_cuad_comp MRETHAN . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 244
    empty                          shift and go to state 120

state 212

    (83) exp_log -> exp agregar_cuad_comp DOUBLE . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 245
    empty                          shift and go to state 120

state 213

    (84) exp_log -> exp agregar_cuad_comp NOT_EQUALS . agregar_exp_op exp_log
    (103) agregar_exp_op -> . empty
    (100) empty -> .

    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)

    agregar_exp_op                 shift and go to state 246
    empty                          shift and go to state 120

state 214

    (64) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if . THEN bloque
    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if . THEN bloque else

    THEN            shift and go to state 247


state 215

    (116) agregar_cuad_if -> empty .

    THEN            reduce using rule 116 (agregar_cuad_if -> empty .)


state 216

    (41) func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func . SEMICOLON

    SEMICOLON       shift and go to state 248


state 217

    (128) agregar_cuad_esp_param_func -> empty .

    SEMICOLON       reduce using rule 128 (agregar_cuad_esp_param_func -> empty .)


state 218

    (42) func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .

    ID              reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RETURN          reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    READ            reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    WRITE           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    IF              reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    COLOR           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    WHILE           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    FOR             reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    LINE            reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    POINT           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    CIRCLE          reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    ARCUP           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    SETX            reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    SETY            reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RIGHT           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    LEFT            reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENSIZE         reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENUP           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENDOWN         reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    CLEAR           reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RBRACKET        reduce using rule 42 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)


state 219

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA . exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 249
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 220

    (72) condicional -> WHILE agregar_while LPAREN expresion RPAREN . agregar_while_cond DO bloque
    (122) agregar_while_cond -> . empty
    (100) empty -> .

    DO              reduce using rule 100 (empty -> .)

    agregar_while_cond             shift and go to state 250
    empty                          shift and go to state 251

state 221

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp . igualar_for_var TO exp agregar_for_cond DO bloque
    (119) igualar_for_var -> . empty
    (100) empty -> .

    TO              reduce using rule 100 (empty -> .)

    igualar_for_var                shift and go to state 252
    empty                          shift and go to state 253

state 222

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque . finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque . finalizar_funs funs
    (123) finalizar_funs -> . empty
    (100) empty -> .

    FUNC            reduce using rule 100 (empty -> .)
    MAIN            reduce using rule 100 (empty -> .)

    finalizar_funs                 shift and go to state 254
    empty                          shift and go to state 255

state 223

    (20) parametros -> tipo ID agregar_param COMA . parametros
    (20) parametros -> . tipo ID agregar_param COMA parametros
    (21) parametros -> . tipo ID agregar_param
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    tipo                           shift and go to state 118
    parametros                     shift and go to state 256

state 224

    (34) asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .

    ID              reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RETURN          reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    READ            reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    WRITE           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    IF              reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    COLOR           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    WHILE           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    FOR             reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    LINE            reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    POINT           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    CIRCLE          reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    ARCUP           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    ARCDOWN         reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    SETX            reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    SETY            reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RIGHT           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    LEFT            reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENSIZE         reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENUP           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENDOWN         reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    CLEAR           reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RBRACKET        reduce using rule 34 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)


state 225

    (112) agregar_cuad_asign -> empty .

    ID              reduce using rule 112 (agregar_cuad_asign -> empty .)
    RETURN          reduce using rule 112 (agregar_cuad_asign -> empty .)
    READ            reduce using rule 112 (agregar_cuad_asign -> empty .)
    WRITE           reduce using rule 112 (agregar_cuad_asign -> empty .)
    IF              reduce using rule 112 (agregar_cuad_asign -> empty .)
    COLOR           reduce using rule 112 (agregar_cuad_asign -> empty .)
    WHILE           reduce using rule 112 (agregar_cuad_asign -> empty .)
    FOR             reduce using rule 112 (agregar_cuad_asign -> empty .)
    LINE            reduce using rule 112 (agregar_cuad_asign -> empty .)
    POINT           reduce using rule 112 (agregar_cuad_asign -> empty .)
    CIRCLE          reduce using rule 112 (agregar_cuad_asign -> empty .)
    ARCUP           reduce using rule 112 (agregar_cuad_asign -> empty .)
    ARCDOWN         reduce using rule 112 (agregar_cuad_asign -> empty .)
    SETX            reduce using rule 112 (agregar_cuad_asign -> empty .)
    SETY            reduce using rule 112 (agregar_cuad_asign -> empty .)
    RIGHT           reduce using rule 112 (agregar_cuad_asign -> empty .)
    LEFT            reduce using rule 112 (agregar_cuad_asign -> empty .)
    PENSIZE         reduce using rule 112 (agregar_cuad_asign -> empty .)
    PENUP           reduce using rule 112 (agregar_cuad_asign -> empty .)
    PENDOWN         reduce using rule 112 (agregar_cuad_asign -> empty .)
    CLEAR           reduce using rule 112 (agregar_cuad_asign -> empty .)
    RBRACKET        reduce using rule 112 (agregar_cuad_asign -> empty .)


state 226

    (35) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func . SEMICOLON

    SEMICOLON       shift and go to state 257


state 227

    (36) modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .

    ID              reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RETURN          reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    READ            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    WRITE           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    IF              reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    COLOR           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    WHILE           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    FOR             reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    LINE            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    POINT           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    CIRCLE          reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    ARCUP           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    ARCDOWN         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    SETX            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    SETY            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RIGHT           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    LEFT            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENSIZE         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENUP           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENDOWN         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    CLEAR           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RBRACKET        reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)


state 228

    (44) e -> exp agregar_param_check COMA . e
    (44) e -> . exp agregar_param_check COMA e
    (45) e -> . exp agregar_param_check
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 156
    e                              shift and go to state 258
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 229

    (97) factor_paren -> LPAREN agregar_exp_op expresion RPAREN .

    TIMES           reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DIVIDE          reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    PLUS            reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MINUS           reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    RPAREN          reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MRTHAN          reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    LSTHAN          reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    LSETHAN         reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MRETHAN         reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DOUBLE          reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    NOT_EQUALS      reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    AND             reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    OR              reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    COMA            reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    SEMICOLON       reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    TO              reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DO              reduce using rule 97 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)


state 230

    (86) exp -> termino agregar_cuad_arith PLUS agregar_exp_op . exp
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    termino                        shift and go to state 124
    exp                            shift and go to state 259
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 231

    (87) exp -> termino agregar_cuad_arith MINUS agregar_exp_op . exp
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    termino                        shift and go to state 124
    exp                            shift and go to state 260
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 232

    (89) termino -> factor agregar_cuad_factor TIMES agregar_exp_op . termino
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    factor                         shift and go to state 127
    termino                        shift and go to state 261
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 233

    (90) termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op . termino
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    factor                         shift and go to state 127
    termino                        shift and go to state 262
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 234

    (98) return_func -> ID agregar_cuad_era LPAREN e . RPAREN fin_func

    RPAREN          shift and go to state 263


state 235

    (39) lectura2 -> COMA exp_var . agregar_cuad_read lectura2
    (113) agregar_cuad_read -> . empty
    (100) empty -> .

    COMA            reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    agregar_cuad_read              shift and go to state 264
    empty                          shift and go to state 167

state 236

    (40) lectura2 -> RPAREN SEMICOLON .

    ID              reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    RETURN          reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    READ            reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    WRITE           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    IF              reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    COLOR           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    WHILE           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    FOR             reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    LINE            reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    POINT           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    ARCUP           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    SETX            reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    SETY            reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    RIGHT           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    LEFT            reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    PENUP           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    CLEAR           reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 40 (lectura2 -> RPAREN SEMICOLON .)


state 237

    (60) escritura2 -> expresion agregar_cuad_print_exp COMA escritura2 .

    RPAREN          reduce using rule 60 (escritura2 -> expresion agregar_cuad_print_exp COMA escritura2 .)


state 238

    (61) escritura2 -> STRING agregar_cuad_print_str COMA escritura2 .

    RPAREN          reduce using rule 61 (escritura2 -> STRING agregar_cuad_print_str COMA escritura2 .)


state 239

    (75) expresion -> exp_log agregar_cuad_log AND agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp_log                        shift and go to state 265
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 240

    (76) expresion -> exp_log agregar_cuad_log OR agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp_log                        shift and go to state 266
    exp                            shift and go to state 143
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 241

    (79) exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 267
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 242

    (80) exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 268
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 243

    (81) exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 269
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 244

    (82) exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 270
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 245

    (83) exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 271
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 246

    (84) exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op . exp_log
    (78) exp_log -> . exp agregar_cuad_comp
    (79) exp_log -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log
    (80) exp_log -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log
    (81) exp_log -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log
    (82) exp_log -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log
    (83) exp_log -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log
    (84) exp_log -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 143
    exp_log                        shift and go to state 272
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 247

    (64) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN . bloque
    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN . bloque else
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 273

state 248

    (41) func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .

    ID              reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RETURN          reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    READ            reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WRITE           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    IF              reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    COLOR           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WHILE           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    FOR             reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LINE            reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    POINT           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CIRCLE          reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCUP           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETX            reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETY            reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RIGHT           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LEFT            reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENSIZE         reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENUP           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENDOWN         reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CLEAR           reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RBRACKET        reduce using rule 41 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)


state 249

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp . COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    COMA            shift and go to state 274


state 250

    (72) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond . DO bloque

    DO              shift and go to state 275


state 251

    (122) agregar_while_cond -> empty .

    DO              reduce using rule 122 (agregar_while_cond -> empty .)


state 252

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var . TO exp agregar_for_cond DO bloque

    TO              shift and go to state 276


state 253

    (119) igualar_for_var -> empty .

    TO              reduce using rule 119 (igualar_for_var -> empty .)


state 254

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs .
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs . funs
    (17) funs -> . FUNC tipo_func funs2

    MAIN            reduce using rule 18 (funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs .)
    FUNC            shift and go to state 13

    funs                           shift and go to state 277

state 255

    (123) finalizar_funs -> empty .

    FUNC            reduce using rule 123 (finalizar_funs -> empty .)
    MAIN            reduce using rule 123 (finalizar_funs -> empty .)


state 256

    (20) parametros -> tipo ID agregar_param COMA parametros .

    RPAREN          reduce using rule 20 (parametros -> tipo ID agregar_param COMA parametros .)


state 257

    (35) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .

    ID              reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RETURN          reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    READ            reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    WRITE           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    IF              reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    COLOR           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    WHILE           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    FOR             reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    LINE            reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    POINT           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    CIRCLE          reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    ARCUP           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    ARCDOWN         reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    SETX            reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    SETY            reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RIGHT           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    LEFT            reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENSIZE         reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENUP           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENDOWN         reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    CLEAR           reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RBRACKET        reduce using rule 35 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)


state 258

    (44) e -> exp agregar_param_check COMA e .

    RPAREN          reduce using rule 44 (e -> exp agregar_param_check COMA e .)


state 259

    (86) exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .

    RPAREN          reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    MRTHAN          reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    LSTHAN          reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    LSETHAN         reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    MRETHAN         reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    DOUBLE          reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    NOT_EQUALS      reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    AND             reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    OR              reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    COMA            reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    SEMICOLON       reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    TO              reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    DO              reduce using rule 86 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)


state 260

    (87) exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .

    RPAREN          reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    MRTHAN          reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    LSTHAN          reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    LSETHAN         reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    MRETHAN         reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    DOUBLE          reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    NOT_EQUALS      reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    AND             reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    OR              reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    COMA            reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    SEMICOLON       reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    TO              reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    DO              reduce using rule 87 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)


state 261

    (89) termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .

    PLUS            reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MINUS           reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    RPAREN          reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MRTHAN          reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    LSTHAN          reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    LSETHAN         reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MRETHAN         reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    DOUBLE          reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    NOT_EQUALS      reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    AND             reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    OR              reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    COMA            reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    SEMICOLON       reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    TO              reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    DO              reduce using rule 89 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)


state 262

    (90) termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .

    PLUS            reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MINUS           reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    RPAREN          reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MRTHAN          reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    LSTHAN          reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    LSETHAN         reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MRETHAN         reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    DOUBLE          reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    NOT_EQUALS      reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    AND             reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    OR              reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    COMA            reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    SEMICOLON       reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    TO              reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    DO              reduce using rule 90 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)


state 263

    (98) return_func -> ID agregar_cuad_era LPAREN e RPAREN . fin_func
    (126) fin_func -> . empty
    (100) empty -> .

    TIMES           reduce using rule 100 (empty -> .)
    DIVIDE          reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    MRTHAN          reduce using rule 100 (empty -> .)
    LSTHAN          reduce using rule 100 (empty -> .)
    LSETHAN         reduce using rule 100 (empty -> .)
    MRETHAN         reduce using rule 100 (empty -> .)
    DOUBLE          reduce using rule 100 (empty -> .)
    NOT_EQUALS      reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMA            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    DO              reduce using rule 100 (empty -> .)

    fin_func                       shift and go to state 278
    empty                          shift and go to state 190

state 264

    (39) lectura2 -> COMA exp_var agregar_cuad_read . lectura2
    (39) lectura2 -> . COMA exp_var agregar_cuad_read lectura2
    (40) lectura2 -> . RPAREN SEMICOLON

    COMA            shift and go to state 201
    RPAREN          shift and go to state 202

    lectura2                       shift and go to state 279

state 265

    (75) expresion -> exp_log agregar_cuad_log AND agregar_exp_op exp_log .

    COMA            reduce using rule 75 (expresion -> exp_log agregar_cuad_log AND agregar_exp_op exp_log .)
    RPAREN          reduce using rule 75 (expresion -> exp_log agregar_cuad_log AND agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 75 (expresion -> exp_log agregar_cuad_log AND agregar_exp_op exp_log .)


state 266

    (76) expresion -> exp_log agregar_cuad_log OR agregar_exp_op exp_log .

    COMA            reduce using rule 76 (expresion -> exp_log agregar_cuad_log OR agregar_exp_op exp_log .)
    RPAREN          reduce using rule 76 (expresion -> exp_log agregar_cuad_log OR agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 76 (expresion -> exp_log agregar_cuad_log OR agregar_exp_op exp_log .)


state 267

    (79) exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .

    AND             reduce using rule 79 (exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .)
    OR              reduce using rule 79 (exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .)
    COMA            reduce using rule 79 (exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .)
    RPAREN          reduce using rule 79 (exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 79 (exp_log -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_log .)


state 268

    (80) exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .

    AND             reduce using rule 80 (exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .)
    OR              reduce using rule 80 (exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .)
    COMA            reduce using rule 80 (exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .)
    RPAREN          reduce using rule 80 (exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 80 (exp_log -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_log .)


state 269

    (81) exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .

    AND             reduce using rule 81 (exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .)
    OR              reduce using rule 81 (exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .)
    COMA            reduce using rule 81 (exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .)
    RPAREN          reduce using rule 81 (exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 81 (exp_log -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_log .)


state 270

    (82) exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .

    AND             reduce using rule 82 (exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .)
    OR              reduce using rule 82 (exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .)
    COMA            reduce using rule 82 (exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .)
    RPAREN          reduce using rule 82 (exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 82 (exp_log -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_log .)


state 271

    (83) exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .

    AND             reduce using rule 83 (exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .)
    OR              reduce using rule 83 (exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .)
    COMA            reduce using rule 83 (exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .)
    RPAREN          reduce using rule 83 (exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 83 (exp_log -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_log .)


state 272

    (84) exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .

    AND             reduce using rule 84 (exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .)
    OR              reduce using rule 84 (exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .)
    COMA            reduce using rule 84 (exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .)
    RPAREN          reduce using rule 84 (exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .)
    SEMICOLON       reduce using rule 84 (exp_log -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_log .)


state 273

    (64) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .
    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque . else
    (66) else -> . ELSE agregar_cuad_else bloque

    ID              reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RETURN          reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    READ            reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    WRITE           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    IF              reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    COLOR           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    WHILE           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    FOR             reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    LINE            reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    POINT           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    CIRCLE          reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ARCUP           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ARCDOWN         reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    SETX            reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    SETY            reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RIGHT           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    LEFT            reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENSIZE         reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENUP           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENDOWN         reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    CLEAR           reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RBRACKET        reduce using rule 64 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ELSE            shift and go to state 281

    else                           shift and go to state 280

state 274

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA . exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 282
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 275

    (72) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO . bloque
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 283

state 276

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO . exp agregar_for_cond DO bloque
    (85) exp -> . termino agregar_cuad_arith
    (86) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (87) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (88) termino -> . factor agregar_cuad_factor
    (89) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (90) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (91) factor -> . factor_paren
    (92) factor -> . PLUS var_cte
    (93) factor -> . MINUS var_cte
    (94) factor -> . return_func
    (95) factor -> . var_cte
    (96) factor -> . exp_var
    (97) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (98) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (67) var_cte -> . INT
    (68) var_cte -> . FLOAT
    (69) var_cte -> . CHAR
    (99) exp_var -> . ID

    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    LPAREN          shift and go to state 122
    ID              shift and go to state 132
    INT             shift and go to state 133
    FLOAT           shift and go to state 134
    CHAR            shift and go to state 135

    exp                            shift and go to state 284
    termino                        shift and go to state 124
    factor                         shift and go to state 127
    factor_paren                   shift and go to state 128
    var_cte                        shift and go to state 129
    return_func                    shift and go to state 130
    exp_var                        shift and go to state 131

state 277

    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs .

    MAIN            reduce using rule 19 (funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs .)


state 278

    (98) return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .

    TIMES           reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DIVIDE          reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    PLUS            reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MINUS           reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    RPAREN          reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MRTHAN          reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    LSTHAN          reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    LSETHAN         reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MRETHAN         reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DOUBLE          reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    NOT_EQUALS      reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    AND             reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    OR              reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    COMA            reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    SEMICOLON       reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    TO              reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DO              reduce using rule 98 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)


state 279

    (39) lectura2 -> COMA exp_var agregar_cuad_read lectura2 .

    ID              reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RETURN          reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    READ            reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    WRITE           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    IF              reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    COLOR           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    WHILE           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    FOR             reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    LINE            reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    POINT           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    CIRCLE          reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    ARCUP           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    ARCDOWN         reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    SETX            reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    SETY            reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RIGHT           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    LEFT            reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENSIZE         reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENUP           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENDOWN         reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    CLEAR           reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RBRACKET        reduce using rule 39 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)


state 280

    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .

    ID              reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RETURN          reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    READ            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    WRITE           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    IF              reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    COLOR           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    WHILE           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    FOR             reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    LINE            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    POINT           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    CIRCLE          reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    ARCUP           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    ARCDOWN         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    SETX            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    SETY            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RIGHT           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    LEFT            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENSIZE         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENUP           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENDOWN         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    CLEAR           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RBRACKET        reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)


state 281

    (66) else -> ELSE . agregar_cuad_else bloque
    (117) agregar_cuad_else -> . empty
    (100) empty -> .

    LBRACKET        reduce using rule 100 (empty -> .)

    agregar_cuad_else              shift and go to state 285
    empty                          shift and go to state 286

state 282

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp . RPAREN agregar_cuad_esp_param_func SEMICOLON

    RPAREN          shift and go to state 287


state 283

    (72) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .

    ID              reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RETURN          reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    READ            reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    WRITE           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    IF              reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    COLOR           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    WHILE           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    FOR             reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    LINE            reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    POINT           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    CIRCLE          reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    ARCUP           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    ARCDOWN         reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    SETX            reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    SETY            reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RIGHT           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    LEFT            reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENSIZE         reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENUP           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENDOWN         reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    CLEAR           reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RBRACKET        reduce using rule 72 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)


state 284

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp . agregar_for_cond DO bloque
    (120) agregar_for_cond -> . empty
    (100) empty -> .

    DO              reduce using rule 100 (empty -> .)

    agregar_for_cond               shift and go to state 288
    empty                          shift and go to state 289

state 285

    (66) else -> ELSE agregar_cuad_else . bloque
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 290

state 286

    (117) agregar_cuad_else -> empty .

    LBRACKET        reduce using rule 117 (agregar_cuad_else -> empty .)


state 287

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN . agregar_cuad_esp_param_func SEMICOLON
    (128) agregar_cuad_esp_param_func -> . empty
    (100) empty -> .

    SEMICOLON       reduce using rule 100 (empty -> .)

    agregar_cuad_esp_param_func    shift and go to state 291
    empty                          shift and go to state 217

state 288

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond . DO bloque

    DO              shift and go to state 292


state 289

    (120) agregar_for_cond -> empty .

    DO              reduce using rule 120 (agregar_for_cond -> empty .)


state 290

    (66) else -> ELSE agregar_cuad_else bloque .

    ID              reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    RETURN          reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    READ            reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    WRITE           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    IF              reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    COLOR           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    WHILE           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    FOR             reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    LINE            reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    POINT           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    CIRCLE          reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    ARCUP           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    ARCDOWN         reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    SETX            reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    SETY            reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    RIGHT           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    LEFT            reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    PENSIZE         reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    PENUP           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    PENDOWN         reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    CLEAR           reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)
    RBRACKET        reduce using rule 66 (else -> ELSE agregar_cuad_else bloque .)


state 291

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func . SEMICOLON

    SEMICOLON       shift and go to state 293


state 292

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO . bloque
    (22) bloque -> . LBRACKET bloque1 RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 294

state 293

    (43) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .

    ID              reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RETURN          reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    READ            reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WRITE           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    IF              reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    COLOR           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WHILE           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    FOR             reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LINE            reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    POINT           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CIRCLE          reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCUP           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETX            reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETY            reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RIGHT           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LEFT            reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENSIZE         reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENUP           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENDOWN         reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CLEAR           reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RBRACKET        reduce using rule 43 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)


state 294

    (73) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .

    ID              reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RETURN          reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    READ            reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    WRITE           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    IF              reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    COLOR           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    WHILE           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    FOR             reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    LINE            reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    POINT           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    CIRCLE          reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    ARCUP           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    ARCDOWN         reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    SETX            reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    SETY            reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RIGHT           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    LEFT            reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENSIZE         reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENUP           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENDOWN         reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    CLEAR           reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RBRACKET        reduce using rule 73 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACKET in state 44 resolved as shift
