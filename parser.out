Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
Rule 2     programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
Rule 3     inicio_programa -> ID
Rule 4     vars -> VAR vars2
Rule 5     vars -> empty
Rule 6     vars2 -> tipo id_var SEMICOLON agregar_variable vars2
Rule 7     vars2 -> tipo id_var SEMICOLON agregar_variable
Rule 8     id_var -> ID agregar_lstvar COMA id_var
Rule 9     id_var -> ID agregar_lstvar
Rule 10    tipo -> NOM_INT
Rule 11    tipo -> NOM_FLOAT
Rule 12    tipo -> NOM_CHAR
Rule 13    tipo_func -> VOID
Rule 14    tipo_func -> NOM_INT
Rule 15    tipo_func -> NOM_FLOAT
Rule 16    tipo_func -> NOM_CHAR
Rule 17    funs -> FUNC tipo_func funs2
Rule 18    funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
Rule 19    funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs
Rule 20    parametros -> tipo ID agregar_param COMA parametros
Rule 21    parametros -> tipo ID agregar_param
Rule 22    parametros -> empty
Rule 23    bloque -> LBRACKET bloque1 RBRACKET
Rule 24    bloque -> LBRACKET RBRACKET
Rule 25    bloque1 -> estatuto bloque1
Rule 26    bloque1 -> empty
Rule 27    estatuto -> asignacion
Rule 28    estatuto -> modulo_v
Rule 29    estatuto -> return
Rule 30    estatuto -> lectura
Rule 31    estatuto -> escritura
Rule 32    estatuto -> desicion
Rule 33    estatuto -> repeticion
Rule 34    estatuto -> func_esp
Rule 35    asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
Rule 36    modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
Rule 37    modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
Rule 38    return -> RETURN LPAREN exp RPAREN SEMICOLON
Rule 39    lectura -> READ LPAREN exp_var agregar_cuad_read lectura2
Rule 40    lectura2 -> COMA exp_var agregar_cuad_read lectura2
Rule 41    lectura2 -> RPAREN SEMICOLON
Rule 42    func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
Rule 43    func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
Rule 44    func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
Rule 45    e -> exp agregar_param_check COMA e
Rule 46    e -> exp agregar_param_check
Rule 47    func_esp_name_param -> LINE agregar_esp_func
Rule 48    func_esp_name_param -> POINT agregar_esp_func
Rule 49    func_esp_name_param -> CIRCLE agregar_esp_func
Rule 50    func_esp_name_param -> ARCUP agregar_esp_func
Rule 51    func_esp_name_param -> ARCDOWN agregar_esp_func
Rule 52    func_esp_name_param -> SETX agregar_esp_func
Rule 53    func_esp_name_param -> SETY agregar_esp_func
Rule 54    func_esp_name_param -> RIGHT agregar_esp_func
Rule 55    func_esp_name_param -> LEFT agregar_esp_func
Rule 56    func_esp_name_param -> PENSIZE agregar_esp_func
Rule 57    func_esp_name_no_param -> PENUP agregar_esp_func
Rule 58    func_esp_name_no_param -> PENDOWN agregar_esp_func
Rule 59    func_esp_name_no_param -> CLEAR agregar_esp_func
Rule 60    escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON
Rule 61    escritura2 -> expresion agregar_cuad_print_exp COMA escritura2
Rule 62    escritura2 -> STRING agregar_cuad_print_str COMA escritura2
Rule 63    escritura2 -> expresion agregar_cuad_print_exp
Rule 64    escritura2 -> STRING agregar_cuad_print_str
Rule 65    desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
Rule 66    desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
Rule 67    else -> ELSE agregar_cuad_else bloque
Rule 68    var_cte -> INT
Rule 69    var_cte -> FLOAT
Rule 70    var_cte -> CHAR
Rule 71    repeticion -> condicional
Rule 72    repeticion -> no_condicional
Rule 73    condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
Rule 74    no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
Rule 75    expresion -> exp_comp agregar_cuad_log exp_log
Rule 76    exp_log -> AND agregar_exp_op expresion
Rule 77    exp_log -> OR agregar_exp_op expresion
Rule 78    exp_log -> empty
Rule 79    exp_comp -> exp agregar_cuad_comp
Rule 80    exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
Rule 81    exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
Rule 82    exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
Rule 83    exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
Rule 84    exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
Rule 85    exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
Rule 86    exp -> termino agregar_cuad_arith
Rule 87    exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp
Rule 88    exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp
Rule 89    termino -> factor agregar_cuad_factor
Rule 90    termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino
Rule 91    termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino
Rule 92    factor -> factor_paren
Rule 93    factor -> PLUS var_cte
Rule 94    factor -> MINUS var_cte
Rule 95    factor -> return_func
Rule 96    factor -> var_cte
Rule 97    factor -> exp_var
Rule 98    factor_paren -> LPAREN agregar_exp_op expresion RPAREN
Rule 99    return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func
Rule 100   return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func
Rule 101   exp_var -> ID
Rule 102   empty -> <empty>
Rule 103   agregar_funs -> empty
Rule 104   agregar_param -> empty
Rule 105   agregar_exp_op -> empty
Rule 106   agregar_lstvar -> empty
Rule 107   agregar_variable -> empty
Rule 108   agregar_cuad_main -> empty
Rule 109   completar_cuad_main -> empty
Rule 110   agregar_cuad_log -> empty
Rule 111   agregar_cuad_comp -> empty
Rule 112   agregar_cuad_arith -> empty
Rule 113   agregar_cuad_factor -> empty
Rule 114   agregar_cuad_asign -> empty
Rule 115   agregar_cuad_read -> empty
Rule 116   agregar_cuad_print_str -> empty
Rule 117   agregar_cuad_print_exp -> empty
Rule 118   agregar_cuad_if -> empty
Rule 119   agregar_cuad_else -> empty
Rule 120   agregar_for_var -> empty
Rule 121   igualar_for_var -> empty
Rule 122   agregar_for_cond -> empty
Rule 123   agregar_while -> empty
Rule 124   agregar_while_cond -> empty
Rule 125   finalizar_funs -> empty
Rule 126   agregar_cuad_era -> empty
Rule 127   agregar_param_check -> empty
Rule 128   fin_func -> empty
Rule 129   agregar_esp_func -> empty
Rule 130   agregar_cuad_esp_param_func -> empty
Rule 131   agregar_cuad_esp_no_param_func -> empty

Terminals, with rules where they appear

AND                  : 76
ARCDOWN              : 51
ARCUP                : 50
CHAR                 : 70
CIRCLE               : 49
CLEAR                : 59
COLOR                : 44
COMA                 : 8 20 40 44 44 45 61 62
DIVIDE               : 91
DO                   : 73 74
DOUBLE               : 84
ELSE                 : 67
EQUALS               : 35 74
FLOAT                : 69
FOR                  : 74
FUNC                 : 17
ID                   : 3 8 9 18 19 20 21 36 37 74 99 100 101
IF                   : 65 66
INT                  : 68
LBRACKET             : 23 24
LEFT                 : 55
LINE                 : 47
LPAREN               : 1 2 18 19 36 37 38 39 42 43 44 60 65 66 73 98 99 100
LSETHAN              : 82
LSTHAN               : 81
MAIN                 : 1 2
MINUS                : 88 94
MODULE               : 18 19
MRETHAN              : 83
MRTHAN               : 80
NOM_CHAR             : 12 16
NOM_FLOAT            : 11 15
NOM_INT              : 10 14
NOT_EQUALS           : 85
OR                   : 77
PENDOWN              : 58
PENSIZE              : 56
PENUP                : 57
PLUS                 : 87 93
POINT                : 48
PROGRAM              : 1 2
RBRACKET             : 23 24
READ                 : 39
RETURN               : 38
RIGHT                : 54
RPAREN               : 1 2 18 19 36 37 38 41 42 43 44 60 65 66 73 98 99 100
SEMICOLON            : 1 2 6 7 35 36 37 38 41 42 43 44 60
SETX                 : 52
SETY                 : 53
STRING               : 62 64
THEN                 : 65 66
TIMES                : 90
TO                   : 74
VAR                  : 4
VOID                 : 13
WHILE                : 73
WRITE                : 60
error                : 

Nonterminals, with rules where they appear

agregar_cuad_arith   : 86 87 88
agregar_cuad_asign   : 35
agregar_cuad_comp    : 79 80 81 82 83 84 85
agregar_cuad_else    : 67
agregar_cuad_era     : 36 37 99 100
agregar_cuad_esp_no_param_func : 43
agregar_cuad_esp_param_func : 42 44
agregar_cuad_factor  : 89 90 91
agregar_cuad_if      : 65 66
agregar_cuad_log     : 75
agregar_cuad_main    : 1 2
agregar_cuad_print_exp : 61 63
agregar_cuad_print_str : 62 64
agregar_cuad_read    : 39 40
agregar_esp_func     : 44 47 48 49 50 51 52 53 54 55 56 57 58 59
agregar_exp_op       : 35 76 77 80 81 82 83 84 85 87 88 90 91 98
agregar_for_cond     : 74
agregar_for_var      : 74
agregar_funs         : 18 19
agregar_lstvar       : 8 9
agregar_param        : 20 21
agregar_param_check  : 45 46
agregar_variable     : 6 7
agregar_while        : 73
agregar_while_cond   : 73
asignacion           : 27
bloque               : 1 2 18 19 65 66 67 73 74
bloque1              : 23 25
completar_cuad_main  : 1 2
condicional          : 71
desicion             : 32
e                    : 36 45 99
else                 : 66
empty                : 5 22 26 78 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
escritura            : 31
escritura2           : 60 61 62
estatuto             : 25
exp                  : 38 42 44 44 44 45 46 74 74 79 80 81 82 83 84 85 87 88
exp_comp             : 75 80 81 82 83 84 85
exp_log              : 75
exp_var              : 35 39 40 97
expresion            : 35 61 63 65 66 73 76 77 98
factor               : 89 90 91
factor_paren         : 92
fin_func             : 36 37 99 100
finalizar_funs       : 18 19
func_esp             : 34
func_esp_name_no_param : 43
func_esp_name_param  : 42
funs                 : 1 19
funs2                : 17
id_var               : 6 7 8
igualar_for_var      : 74
inicio_programa      : 1 2
lectura              : 30
lectura2             : 39 40
modulo_v             : 28
no_condicional       : 72
parametros           : 18 19 20
programa             : 0
repeticion           : 33
return               : 29
return_func          : 95
termino              : 86 87 88 90 91
tipo                 : 6 7 20 21
tipo_func            : 17
var_cte              : 93 94 96
vars                 : 1 2 18 19
vars2                : 4 6

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> . PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM . inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (3) inicio_programa -> . ID

    ID              shift and go to state 4

    inicio_programa                shift and go to state 3

state 3

    (1) programa -> PROGRAM inicio_programa . agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa . agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (108) agregar_cuad_main -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_main              shift and go to state 5
    empty                          shift and go to state 6

state 4

    (3) inicio_programa -> ID .

    SEMICOLON       reduce using rule 3 (inicio_programa -> ID .)


state 5

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main . SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main . SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque

    SEMICOLON       shift and go to state 7


state 6

    (108) agregar_cuad_main -> empty .

    SEMICOLON       reduce using rule 108 (agregar_cuad_main -> empty .)


state 7

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON . vars funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON . vars MAIN LPAREN RPAREN completar_cuad_main bloque
    (4) vars -> . VAR vars2
    (5) vars -> . empty
    (102) empty -> .

    VAR             shift and go to state 9
    MAIN            reduce using rule 102 (empty -> .)
    FUNC            reduce using rule 102 (empty -> .)

    vars                           shift and go to state 8
    empty                          shift and go to state 10

state 8

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars . funs MAIN LPAREN RPAREN completar_cuad_main bloque
    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars . MAIN LPAREN RPAREN completar_cuad_main bloque
    (17) funs -> . FUNC tipo_func funs2

    MAIN            shift and go to state 12
    FUNC            shift and go to state 13

    funs                           shift and go to state 11

state 9

    (4) vars -> VAR . vars2
    (6) vars2 -> . tipo id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> . tipo id_var SEMICOLON agregar_variable
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    vars2                          shift and go to state 14
    tipo                           shift and go to state 15

state 10

    (5) vars -> empty .

    MAIN            reduce using rule 5 (vars -> empty .)
    FUNC            reduce using rule 5 (vars -> empty .)
    LBRACKET        reduce using rule 5 (vars -> empty .)


state 11

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs . MAIN LPAREN RPAREN completar_cuad_main bloque

    MAIN            shift and go to state 19


state 12

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN . LPAREN RPAREN completar_cuad_main bloque

    LPAREN          shift and go to state 20


state 13

    (17) funs -> FUNC . tipo_func funs2
    (13) tipo_func -> . VOID
    (14) tipo_func -> . NOM_INT
    (15) tipo_func -> . NOM_FLOAT
    (16) tipo_func -> . NOM_CHAR

    VOID            shift and go to state 22
    NOM_INT         shift and go to state 23
    NOM_FLOAT       shift and go to state 24
    NOM_CHAR        shift and go to state 25

    tipo_func                      shift and go to state 21

state 14

    (4) vars -> VAR vars2 .

    MAIN            reduce using rule 4 (vars -> VAR vars2 .)
    FUNC            reduce using rule 4 (vars -> VAR vars2 .)
    LBRACKET        reduce using rule 4 (vars -> VAR vars2 .)


state 15

    (6) vars2 -> tipo . id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> tipo . id_var SEMICOLON agregar_variable
    (8) id_var -> . ID agregar_lstvar COMA id_var
    (9) id_var -> . ID agregar_lstvar

    ID              shift and go to state 27

    id_var                         shift and go to state 26

state 16

    (10) tipo -> NOM_INT .

    ID              reduce using rule 10 (tipo -> NOM_INT .)


state 17

    (11) tipo -> NOM_FLOAT .

    ID              reduce using rule 11 (tipo -> NOM_FLOAT .)


state 18

    (12) tipo -> NOM_CHAR .

    ID              reduce using rule 12 (tipo -> NOM_CHAR .)


state 19

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN . LPAREN RPAREN completar_cuad_main bloque

    LPAREN          shift and go to state 28


state 20

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN . RPAREN completar_cuad_main bloque

    RPAREN          shift and go to state 29


state 21

    (17) funs -> FUNC tipo_func . funs2
    (18) funs2 -> . MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> . MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs

    MODULE          shift and go to state 31

    funs2                          shift and go to state 30

state 22

    (13) tipo_func -> VOID .

    MODULE          reduce using rule 13 (tipo_func -> VOID .)


state 23

    (14) tipo_func -> NOM_INT .

    MODULE          reduce using rule 14 (tipo_func -> NOM_INT .)


state 24

    (15) tipo_func -> NOM_FLOAT .

    MODULE          reduce using rule 15 (tipo_func -> NOM_FLOAT .)


state 25

    (16) tipo_func -> NOM_CHAR .

    MODULE          reduce using rule 16 (tipo_func -> NOM_CHAR .)


state 26

    (6) vars2 -> tipo id_var . SEMICOLON agregar_variable vars2
    (7) vars2 -> tipo id_var . SEMICOLON agregar_variable

    SEMICOLON       shift and go to state 32


state 27

    (8) id_var -> ID . agregar_lstvar COMA id_var
    (9) id_var -> ID . agregar_lstvar
    (106) agregar_lstvar -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_lstvar                 shift and go to state 33
    empty                          shift and go to state 34

state 28

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN . RPAREN completar_cuad_main bloque

    RPAREN          shift and go to state 35


state 29

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN . completar_cuad_main bloque
    (109) completar_cuad_main -> . empty
    (102) empty -> .

    LBRACKET        reduce using rule 102 (empty -> .)

    completar_cuad_main            shift and go to state 36
    empty                          shift and go to state 37

state 30

    (17) funs -> FUNC tipo_func funs2 .

    MAIN            reduce using rule 17 (funs -> FUNC tipo_func funs2 .)


state 31

    (18) funs2 -> MODULE . ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE . ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs

    ID              shift and go to state 38


state 32

    (6) vars2 -> tipo id_var SEMICOLON . agregar_variable vars2
    (7) vars2 -> tipo id_var SEMICOLON . agregar_variable
    (107) agregar_variable -> . empty
    (102) empty -> .

    NOM_INT         reduce using rule 102 (empty -> .)
    NOM_FLOAT       reduce using rule 102 (empty -> .)
    NOM_CHAR        reduce using rule 102 (empty -> .)
    MAIN            reduce using rule 102 (empty -> .)
    FUNC            reduce using rule 102 (empty -> .)
    LBRACKET        reduce using rule 102 (empty -> .)

    agregar_variable               shift and go to state 39
    empty                          shift and go to state 40

state 33

    (8) id_var -> ID agregar_lstvar . COMA id_var
    (9) id_var -> ID agregar_lstvar .

    COMA            shift and go to state 41
    SEMICOLON       reduce using rule 9 (id_var -> ID agregar_lstvar .)


state 34

    (106) agregar_lstvar -> empty .

    COMA            reduce using rule 106 (agregar_lstvar -> empty .)
    SEMICOLON       reduce using rule 106 (agregar_lstvar -> empty .)


state 35

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN . completar_cuad_main bloque
    (109) completar_cuad_main -> . empty
    (102) empty -> .

    LBRACKET        reduce using rule 102 (empty -> .)

    completar_cuad_main            shift and go to state 42
    empty                          shift and go to state 37

state 36

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main . bloque
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 43

state 37

    (109) completar_cuad_main -> empty .

    LBRACKET        reduce using rule 109 (completar_cuad_main -> empty .)


state 38

    (18) funs2 -> MODULE ID . agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID . agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs
    (103) agregar_funs -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_funs                   shift and go to state 45
    empty                          shift and go to state 46

state 39

    (6) vars2 -> tipo id_var SEMICOLON agregar_variable . vars2
    (7) vars2 -> tipo id_var SEMICOLON agregar_variable .
    (6) vars2 -> . tipo id_var SEMICOLON agregar_variable vars2
    (7) vars2 -> . tipo id_var SEMICOLON agregar_variable
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR

    MAIN            reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    FUNC            reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    LBRACKET        reduce using rule 7 (vars2 -> tipo id_var SEMICOLON agregar_variable .)
    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18

    tipo                           shift and go to state 15
    vars2                          shift and go to state 47

state 40

    (107) agregar_variable -> empty .

    NOM_INT         reduce using rule 107 (agregar_variable -> empty .)
    NOM_FLOAT       reduce using rule 107 (agregar_variable -> empty .)
    NOM_CHAR        reduce using rule 107 (agregar_variable -> empty .)
    MAIN            reduce using rule 107 (agregar_variable -> empty .)
    FUNC            reduce using rule 107 (agregar_variable -> empty .)
    LBRACKET        reduce using rule 107 (agregar_variable -> empty .)


state 41

    (8) id_var -> ID agregar_lstvar COMA . id_var
    (8) id_var -> . ID agregar_lstvar COMA id_var
    (9) id_var -> . ID agregar_lstvar

    ID              shift and go to state 27

    id_var                         shift and go to state 48

state 42

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main . bloque
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 49

state 43

    (2) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque .

    $end            reduce using rule 2 (programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars MAIN LPAREN RPAREN completar_cuad_main bloque .)


state 44

    (23) bloque -> LBRACKET . bloque1 RBRACKET
    (24) bloque -> LBRACKET . RBRACKET
    (25) bloque1 -> . estatuto bloque1
    (26) bloque1 -> . empty
    (27) estatuto -> . asignacion
    (28) estatuto -> . modulo_v
    (29) estatuto -> . return
    (30) estatuto -> . lectura
    (31) estatuto -> . escritura
    (32) estatuto -> . desicion
    (33) estatuto -> . repeticion
    (34) estatuto -> . func_esp
    (102) empty -> .
    (35) asignacion -> . exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (36) modulo_v -> . ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (37) modulo_v -> . ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (38) return -> . RETURN LPAREN exp RPAREN SEMICOLON
    (39) lectura -> . READ LPAREN exp_var agregar_cuad_read lectura2
    (60) escritura -> . WRITE LPAREN escritura2 RPAREN SEMICOLON
    (65) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (66) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
    (71) repeticion -> . condicional
    (72) repeticion -> . no_condicional
    (42) func_esp -> . func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (43) func_esp -> . func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
    (44) func_esp -> . COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (101) exp_var -> . ID
    (73) condicional -> . WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (74) no_condicional -> . FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (47) func_esp_name_param -> . LINE agregar_esp_func
    (48) func_esp_name_param -> . POINT agregar_esp_func
    (49) func_esp_name_param -> . CIRCLE agregar_esp_func
    (50) func_esp_name_param -> . ARCUP agregar_esp_func
    (51) func_esp_name_param -> . ARCDOWN agregar_esp_func
    (52) func_esp_name_param -> . SETX agregar_esp_func
    (53) func_esp_name_param -> . SETY agregar_esp_func
    (54) func_esp_name_param -> . RIGHT agregar_esp_func
    (55) func_esp_name_param -> . LEFT agregar_esp_func
    (56) func_esp_name_param -> . PENSIZE agregar_esp_func
    (57) func_esp_name_no_param -> . PENUP agregar_esp_func
    (58) func_esp_name_no_param -> . PENDOWN agregar_esp_func
    (59) func_esp_name_no_param -> . CLEAR agregar_esp_func

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 51
    ID              shift and go to state 63
    RETURN          shift and go to state 64
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    COLOR           shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74
    LINE            shift and go to state 75
    POINT           shift and go to state 76
    CIRCLE          shift and go to state 77
    ARCUP           shift and go to state 78
    ARCDOWN         shift and go to state 79
    SETX            shift and go to state 80
    SETY            shift and go to state 81
    RIGHT           shift and go to state 82
    LEFT            shift and go to state 83
    PENSIZE         shift and go to state 84
    PENUP           shift and go to state 85
    PENDOWN         shift and go to state 86
    CLEAR           shift and go to state 87

  ! RBRACKET        [ reduce using rule 102 (empty -> .) ]

    bloque1                        shift and go to state 50
    estatuto                       shift and go to state 52
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    modulo_v                       shift and go to state 55
    return                         shift and go to state 56
    lectura                        shift and go to state 57
    escritura                      shift and go to state 58
    desicion                       shift and go to state 59
    repeticion                     shift and go to state 60
    func_esp                       shift and go to state 61
    exp_var                        shift and go to state 62
    condicional                    shift and go to state 68
    no_condicional                 shift and go to state 69
    func_esp_name_param            shift and go to state 70
    func_esp_name_no_param         shift and go to state 71

state 45

    (18) funs2 -> MODULE ID agregar_funs . LPAREN parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs . LPAREN parametros RPAREN vars bloque finalizar_funs funs

    LPAREN          shift and go to state 88


state 46

    (103) agregar_funs -> empty .

    LPAREN          reduce using rule 103 (agregar_funs -> empty .)


state 47

    (6) vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .

    MAIN            reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)
    FUNC            reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)
    LBRACKET        reduce using rule 6 (vars2 -> tipo id_var SEMICOLON agregar_variable vars2 .)


state 48

    (8) id_var -> ID agregar_lstvar COMA id_var .

    SEMICOLON       reduce using rule 8 (id_var -> ID agregar_lstvar COMA id_var .)


state 49

    (1) programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM inicio_programa agregar_cuad_main SEMICOLON vars funs MAIN LPAREN RPAREN completar_cuad_main bloque .)


state 50

    (23) bloque -> LBRACKET bloque1 . RBRACKET

    RBRACKET        shift and go to state 89


state 51

    (24) bloque -> LBRACKET RBRACKET .

    $end            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    FUNC            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    ID              reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    READ            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    WRITE           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    IF              reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    COLOR           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    FOR             reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    LINE            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    POINT           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    CIRCLE          reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    ARCUP           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    ARCDOWN         reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    SETX            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    SETY            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    RIGHT           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    LEFT            reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    PENSIZE         reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    PENUP           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    PENDOWN         reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    CLEAR           reduce using rule 24 (bloque -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 24 (bloque -> LBRACKET RBRACKET .)


state 52

    (25) bloque1 -> estatuto . bloque1
    (25) bloque1 -> . estatuto bloque1
    (26) bloque1 -> . empty
    (27) estatuto -> . asignacion
    (28) estatuto -> . modulo_v
    (29) estatuto -> . return
    (30) estatuto -> . lectura
    (31) estatuto -> . escritura
    (32) estatuto -> . desicion
    (33) estatuto -> . repeticion
    (34) estatuto -> . func_esp
    (102) empty -> .
    (35) asignacion -> . exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (36) modulo_v -> . ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (37) modulo_v -> . ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (38) return -> . RETURN LPAREN exp RPAREN SEMICOLON
    (39) lectura -> . READ LPAREN exp_var agregar_cuad_read lectura2
    (60) escritura -> . WRITE LPAREN escritura2 RPAREN SEMICOLON
    (65) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (66) desicion -> . IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else
    (71) repeticion -> . condicional
    (72) repeticion -> . no_condicional
    (42) func_esp -> . func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (43) func_esp -> . func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON
    (44) func_esp -> . COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (101) exp_var -> . ID
    (73) condicional -> . WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (74) no_condicional -> . FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (47) func_esp_name_param -> . LINE agregar_esp_func
    (48) func_esp_name_param -> . POINT agregar_esp_func
    (49) func_esp_name_param -> . CIRCLE agregar_esp_func
    (50) func_esp_name_param -> . ARCUP agregar_esp_func
    (51) func_esp_name_param -> . ARCDOWN agregar_esp_func
    (52) func_esp_name_param -> . SETX agregar_esp_func
    (53) func_esp_name_param -> . SETY agregar_esp_func
    (54) func_esp_name_param -> . RIGHT agregar_esp_func
    (55) func_esp_name_param -> . LEFT agregar_esp_func
    (56) func_esp_name_param -> . PENSIZE agregar_esp_func
    (57) func_esp_name_no_param -> . PENUP agregar_esp_func
    (58) func_esp_name_no_param -> . PENDOWN agregar_esp_func
    (59) func_esp_name_no_param -> . CLEAR agregar_esp_func

    RBRACKET        reduce using rule 102 (empty -> .)
    ID              shift and go to state 63
    RETURN          shift and go to state 64
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    COLOR           shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74
    LINE            shift and go to state 75
    POINT           shift and go to state 76
    CIRCLE          shift and go to state 77
    ARCUP           shift and go to state 78
    ARCDOWN         shift and go to state 79
    SETX            shift and go to state 80
    SETY            shift and go to state 81
    RIGHT           shift and go to state 82
    LEFT            shift and go to state 83
    PENSIZE         shift and go to state 84
    PENUP           shift and go to state 85
    PENDOWN         shift and go to state 86
    CLEAR           shift and go to state 87

    estatuto                       shift and go to state 52
    bloque1                        shift and go to state 90
    empty                          shift and go to state 53
    asignacion                     shift and go to state 54
    modulo_v                       shift and go to state 55
    return                         shift and go to state 56
    lectura                        shift and go to state 57
    escritura                      shift and go to state 58
    desicion                       shift and go to state 59
    repeticion                     shift and go to state 60
    func_esp                       shift and go to state 61
    exp_var                        shift and go to state 62
    condicional                    shift and go to state 68
    no_condicional                 shift and go to state 69
    func_esp_name_param            shift and go to state 70
    func_esp_name_no_param         shift and go to state 71

state 53

    (26) bloque1 -> empty .

    RBRACKET        reduce using rule 26 (bloque1 -> empty .)


state 54

    (27) estatuto -> asignacion .

    ID              reduce using rule 27 (estatuto -> asignacion .)
    RETURN          reduce using rule 27 (estatuto -> asignacion .)
    READ            reduce using rule 27 (estatuto -> asignacion .)
    WRITE           reduce using rule 27 (estatuto -> asignacion .)
    IF              reduce using rule 27 (estatuto -> asignacion .)
    COLOR           reduce using rule 27 (estatuto -> asignacion .)
    WHILE           reduce using rule 27 (estatuto -> asignacion .)
    FOR             reduce using rule 27 (estatuto -> asignacion .)
    LINE            reduce using rule 27 (estatuto -> asignacion .)
    POINT           reduce using rule 27 (estatuto -> asignacion .)
    CIRCLE          reduce using rule 27 (estatuto -> asignacion .)
    ARCUP           reduce using rule 27 (estatuto -> asignacion .)
    ARCDOWN         reduce using rule 27 (estatuto -> asignacion .)
    SETX            reduce using rule 27 (estatuto -> asignacion .)
    SETY            reduce using rule 27 (estatuto -> asignacion .)
    RIGHT           reduce using rule 27 (estatuto -> asignacion .)
    LEFT            reduce using rule 27 (estatuto -> asignacion .)
    PENSIZE         reduce using rule 27 (estatuto -> asignacion .)
    PENUP           reduce using rule 27 (estatuto -> asignacion .)
    PENDOWN         reduce using rule 27 (estatuto -> asignacion .)
    CLEAR           reduce using rule 27 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 27 (estatuto -> asignacion .)


state 55

    (28) estatuto -> modulo_v .

    ID              reduce using rule 28 (estatuto -> modulo_v .)
    RETURN          reduce using rule 28 (estatuto -> modulo_v .)
    READ            reduce using rule 28 (estatuto -> modulo_v .)
    WRITE           reduce using rule 28 (estatuto -> modulo_v .)
    IF              reduce using rule 28 (estatuto -> modulo_v .)
    COLOR           reduce using rule 28 (estatuto -> modulo_v .)
    WHILE           reduce using rule 28 (estatuto -> modulo_v .)
    FOR             reduce using rule 28 (estatuto -> modulo_v .)
    LINE            reduce using rule 28 (estatuto -> modulo_v .)
    POINT           reduce using rule 28 (estatuto -> modulo_v .)
    CIRCLE          reduce using rule 28 (estatuto -> modulo_v .)
    ARCUP           reduce using rule 28 (estatuto -> modulo_v .)
    ARCDOWN         reduce using rule 28 (estatuto -> modulo_v .)
    SETX            reduce using rule 28 (estatuto -> modulo_v .)
    SETY            reduce using rule 28 (estatuto -> modulo_v .)
    RIGHT           reduce using rule 28 (estatuto -> modulo_v .)
    LEFT            reduce using rule 28 (estatuto -> modulo_v .)
    PENSIZE         reduce using rule 28 (estatuto -> modulo_v .)
    PENUP           reduce using rule 28 (estatuto -> modulo_v .)
    PENDOWN         reduce using rule 28 (estatuto -> modulo_v .)
    CLEAR           reduce using rule 28 (estatuto -> modulo_v .)
    RBRACKET        reduce using rule 28 (estatuto -> modulo_v .)


state 56

    (29) estatuto -> return .

    ID              reduce using rule 29 (estatuto -> return .)
    RETURN          reduce using rule 29 (estatuto -> return .)
    READ            reduce using rule 29 (estatuto -> return .)
    WRITE           reduce using rule 29 (estatuto -> return .)
    IF              reduce using rule 29 (estatuto -> return .)
    COLOR           reduce using rule 29 (estatuto -> return .)
    WHILE           reduce using rule 29 (estatuto -> return .)
    FOR             reduce using rule 29 (estatuto -> return .)
    LINE            reduce using rule 29 (estatuto -> return .)
    POINT           reduce using rule 29 (estatuto -> return .)
    CIRCLE          reduce using rule 29 (estatuto -> return .)
    ARCUP           reduce using rule 29 (estatuto -> return .)
    ARCDOWN         reduce using rule 29 (estatuto -> return .)
    SETX            reduce using rule 29 (estatuto -> return .)
    SETY            reduce using rule 29 (estatuto -> return .)
    RIGHT           reduce using rule 29 (estatuto -> return .)
    LEFT            reduce using rule 29 (estatuto -> return .)
    PENSIZE         reduce using rule 29 (estatuto -> return .)
    PENUP           reduce using rule 29 (estatuto -> return .)
    PENDOWN         reduce using rule 29 (estatuto -> return .)
    CLEAR           reduce using rule 29 (estatuto -> return .)
    RBRACKET        reduce using rule 29 (estatuto -> return .)


state 57

    (30) estatuto -> lectura .

    ID              reduce using rule 30 (estatuto -> lectura .)
    RETURN          reduce using rule 30 (estatuto -> lectura .)
    READ            reduce using rule 30 (estatuto -> lectura .)
    WRITE           reduce using rule 30 (estatuto -> lectura .)
    IF              reduce using rule 30 (estatuto -> lectura .)
    COLOR           reduce using rule 30 (estatuto -> lectura .)
    WHILE           reduce using rule 30 (estatuto -> lectura .)
    FOR             reduce using rule 30 (estatuto -> lectura .)
    LINE            reduce using rule 30 (estatuto -> lectura .)
    POINT           reduce using rule 30 (estatuto -> lectura .)
    CIRCLE          reduce using rule 30 (estatuto -> lectura .)
    ARCUP           reduce using rule 30 (estatuto -> lectura .)
    ARCDOWN         reduce using rule 30 (estatuto -> lectura .)
    SETX            reduce using rule 30 (estatuto -> lectura .)
    SETY            reduce using rule 30 (estatuto -> lectura .)
    RIGHT           reduce using rule 30 (estatuto -> lectura .)
    LEFT            reduce using rule 30 (estatuto -> lectura .)
    PENSIZE         reduce using rule 30 (estatuto -> lectura .)
    PENUP           reduce using rule 30 (estatuto -> lectura .)
    PENDOWN         reduce using rule 30 (estatuto -> lectura .)
    CLEAR           reduce using rule 30 (estatuto -> lectura .)
    RBRACKET        reduce using rule 30 (estatuto -> lectura .)


state 58

    (31) estatuto -> escritura .

    ID              reduce using rule 31 (estatuto -> escritura .)
    RETURN          reduce using rule 31 (estatuto -> escritura .)
    READ            reduce using rule 31 (estatuto -> escritura .)
    WRITE           reduce using rule 31 (estatuto -> escritura .)
    IF              reduce using rule 31 (estatuto -> escritura .)
    COLOR           reduce using rule 31 (estatuto -> escritura .)
    WHILE           reduce using rule 31 (estatuto -> escritura .)
    FOR             reduce using rule 31 (estatuto -> escritura .)
    LINE            reduce using rule 31 (estatuto -> escritura .)
    POINT           reduce using rule 31 (estatuto -> escritura .)
    CIRCLE          reduce using rule 31 (estatuto -> escritura .)
    ARCUP           reduce using rule 31 (estatuto -> escritura .)
    ARCDOWN         reduce using rule 31 (estatuto -> escritura .)
    SETX            reduce using rule 31 (estatuto -> escritura .)
    SETY            reduce using rule 31 (estatuto -> escritura .)
    RIGHT           reduce using rule 31 (estatuto -> escritura .)
    LEFT            reduce using rule 31 (estatuto -> escritura .)
    PENSIZE         reduce using rule 31 (estatuto -> escritura .)
    PENUP           reduce using rule 31 (estatuto -> escritura .)
    PENDOWN         reduce using rule 31 (estatuto -> escritura .)
    CLEAR           reduce using rule 31 (estatuto -> escritura .)
    RBRACKET        reduce using rule 31 (estatuto -> escritura .)


state 59

    (32) estatuto -> desicion .

    ID              reduce using rule 32 (estatuto -> desicion .)
    RETURN          reduce using rule 32 (estatuto -> desicion .)
    READ            reduce using rule 32 (estatuto -> desicion .)
    WRITE           reduce using rule 32 (estatuto -> desicion .)
    IF              reduce using rule 32 (estatuto -> desicion .)
    COLOR           reduce using rule 32 (estatuto -> desicion .)
    WHILE           reduce using rule 32 (estatuto -> desicion .)
    FOR             reduce using rule 32 (estatuto -> desicion .)
    LINE            reduce using rule 32 (estatuto -> desicion .)
    POINT           reduce using rule 32 (estatuto -> desicion .)
    CIRCLE          reduce using rule 32 (estatuto -> desicion .)
    ARCUP           reduce using rule 32 (estatuto -> desicion .)
    ARCDOWN         reduce using rule 32 (estatuto -> desicion .)
    SETX            reduce using rule 32 (estatuto -> desicion .)
    SETY            reduce using rule 32 (estatuto -> desicion .)
    RIGHT           reduce using rule 32 (estatuto -> desicion .)
    LEFT            reduce using rule 32 (estatuto -> desicion .)
    PENSIZE         reduce using rule 32 (estatuto -> desicion .)
    PENUP           reduce using rule 32 (estatuto -> desicion .)
    PENDOWN         reduce using rule 32 (estatuto -> desicion .)
    CLEAR           reduce using rule 32 (estatuto -> desicion .)
    RBRACKET        reduce using rule 32 (estatuto -> desicion .)


state 60

    (33) estatuto -> repeticion .

    ID              reduce using rule 33 (estatuto -> repeticion .)
    RETURN          reduce using rule 33 (estatuto -> repeticion .)
    READ            reduce using rule 33 (estatuto -> repeticion .)
    WRITE           reduce using rule 33 (estatuto -> repeticion .)
    IF              reduce using rule 33 (estatuto -> repeticion .)
    COLOR           reduce using rule 33 (estatuto -> repeticion .)
    WHILE           reduce using rule 33 (estatuto -> repeticion .)
    FOR             reduce using rule 33 (estatuto -> repeticion .)
    LINE            reduce using rule 33 (estatuto -> repeticion .)
    POINT           reduce using rule 33 (estatuto -> repeticion .)
    CIRCLE          reduce using rule 33 (estatuto -> repeticion .)
    ARCUP           reduce using rule 33 (estatuto -> repeticion .)
    ARCDOWN         reduce using rule 33 (estatuto -> repeticion .)
    SETX            reduce using rule 33 (estatuto -> repeticion .)
    SETY            reduce using rule 33 (estatuto -> repeticion .)
    RIGHT           reduce using rule 33 (estatuto -> repeticion .)
    LEFT            reduce using rule 33 (estatuto -> repeticion .)
    PENSIZE         reduce using rule 33 (estatuto -> repeticion .)
    PENUP           reduce using rule 33 (estatuto -> repeticion .)
    PENDOWN         reduce using rule 33 (estatuto -> repeticion .)
    CLEAR           reduce using rule 33 (estatuto -> repeticion .)
    RBRACKET        reduce using rule 33 (estatuto -> repeticion .)


state 61

    (34) estatuto -> func_esp .

    ID              reduce using rule 34 (estatuto -> func_esp .)
    RETURN          reduce using rule 34 (estatuto -> func_esp .)
    READ            reduce using rule 34 (estatuto -> func_esp .)
    WRITE           reduce using rule 34 (estatuto -> func_esp .)
    IF              reduce using rule 34 (estatuto -> func_esp .)
    COLOR           reduce using rule 34 (estatuto -> func_esp .)
    WHILE           reduce using rule 34 (estatuto -> func_esp .)
    FOR             reduce using rule 34 (estatuto -> func_esp .)
    LINE            reduce using rule 34 (estatuto -> func_esp .)
    POINT           reduce using rule 34 (estatuto -> func_esp .)
    CIRCLE          reduce using rule 34 (estatuto -> func_esp .)
    ARCUP           reduce using rule 34 (estatuto -> func_esp .)
    ARCDOWN         reduce using rule 34 (estatuto -> func_esp .)
    SETX            reduce using rule 34 (estatuto -> func_esp .)
    SETY            reduce using rule 34 (estatuto -> func_esp .)
    RIGHT           reduce using rule 34 (estatuto -> func_esp .)
    LEFT            reduce using rule 34 (estatuto -> func_esp .)
    PENSIZE         reduce using rule 34 (estatuto -> func_esp .)
    PENUP           reduce using rule 34 (estatuto -> func_esp .)
    PENDOWN         reduce using rule 34 (estatuto -> func_esp .)
    CLEAR           reduce using rule 34 (estatuto -> func_esp .)
    RBRACKET        reduce using rule 34 (estatuto -> func_esp .)


state 62

    (35) asignacion -> exp_var . EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign

    EQUALS          shift and go to state 91


state 63

    (36) modulo_v -> ID . agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON
    (37) modulo_v -> ID . agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON
    (101) exp_var -> ID .
    (126) agregar_cuad_era -> . empty
    (102) empty -> .

    EQUALS          reduce using rule 101 (exp_var -> ID .)
    LPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_era               shift and go to state 92
    empty                          shift and go to state 93

state 64

    (38) return -> RETURN . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 94


state 65

    (39) lectura -> READ . LPAREN exp_var agregar_cuad_read lectura2

    LPAREN          shift and go to state 95


state 66

    (60) escritura -> WRITE . LPAREN escritura2 RPAREN SEMICOLON

    LPAREN          shift and go to state 96


state 67

    (65) desicion -> IF . LPAREN expresion RPAREN agregar_cuad_if THEN bloque
    (66) desicion -> IF . LPAREN expresion RPAREN agregar_cuad_if THEN bloque else

    LPAREN          shift and go to state 97


state 68

    (71) repeticion -> condicional .

    ID              reduce using rule 71 (repeticion -> condicional .)
    RETURN          reduce using rule 71 (repeticion -> condicional .)
    READ            reduce using rule 71 (repeticion -> condicional .)
    WRITE           reduce using rule 71 (repeticion -> condicional .)
    IF              reduce using rule 71 (repeticion -> condicional .)
    COLOR           reduce using rule 71 (repeticion -> condicional .)
    WHILE           reduce using rule 71 (repeticion -> condicional .)
    FOR             reduce using rule 71 (repeticion -> condicional .)
    LINE            reduce using rule 71 (repeticion -> condicional .)
    POINT           reduce using rule 71 (repeticion -> condicional .)
    CIRCLE          reduce using rule 71 (repeticion -> condicional .)
    ARCUP           reduce using rule 71 (repeticion -> condicional .)
    ARCDOWN         reduce using rule 71 (repeticion -> condicional .)
    SETX            reduce using rule 71 (repeticion -> condicional .)
    SETY            reduce using rule 71 (repeticion -> condicional .)
    RIGHT           reduce using rule 71 (repeticion -> condicional .)
    LEFT            reduce using rule 71 (repeticion -> condicional .)
    PENSIZE         reduce using rule 71 (repeticion -> condicional .)
    PENUP           reduce using rule 71 (repeticion -> condicional .)
    PENDOWN         reduce using rule 71 (repeticion -> condicional .)
    CLEAR           reduce using rule 71 (repeticion -> condicional .)
    RBRACKET        reduce using rule 71 (repeticion -> condicional .)


state 69

    (72) repeticion -> no_condicional .

    ID              reduce using rule 72 (repeticion -> no_condicional .)
    RETURN          reduce using rule 72 (repeticion -> no_condicional .)
    READ            reduce using rule 72 (repeticion -> no_condicional .)
    WRITE           reduce using rule 72 (repeticion -> no_condicional .)
    IF              reduce using rule 72 (repeticion -> no_condicional .)
    COLOR           reduce using rule 72 (repeticion -> no_condicional .)
    WHILE           reduce using rule 72 (repeticion -> no_condicional .)
    FOR             reduce using rule 72 (repeticion -> no_condicional .)
    LINE            reduce using rule 72 (repeticion -> no_condicional .)
    POINT           reduce using rule 72 (repeticion -> no_condicional .)
    CIRCLE          reduce using rule 72 (repeticion -> no_condicional .)
    ARCUP           reduce using rule 72 (repeticion -> no_condicional .)
    ARCDOWN         reduce using rule 72 (repeticion -> no_condicional .)
    SETX            reduce using rule 72 (repeticion -> no_condicional .)
    SETY            reduce using rule 72 (repeticion -> no_condicional .)
    RIGHT           reduce using rule 72 (repeticion -> no_condicional .)
    LEFT            reduce using rule 72 (repeticion -> no_condicional .)
    PENSIZE         reduce using rule 72 (repeticion -> no_condicional .)
    PENUP           reduce using rule 72 (repeticion -> no_condicional .)
    PENDOWN         reduce using rule 72 (repeticion -> no_condicional .)
    CLEAR           reduce using rule 72 (repeticion -> no_condicional .)
    RBRACKET        reduce using rule 72 (repeticion -> no_condicional .)


state 70

    (42) func_esp -> func_esp_name_param . LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    LPAREN          shift and go to state 98


state 71

    (43) func_esp -> func_esp_name_no_param . LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON

    LPAREN          shift and go to state 99


state 72

    (44) func_esp -> COLOR . agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 100
    empty                          shift and go to state 101

state 73

    (73) condicional -> WHILE . agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque
    (123) agregar_while -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_while                  shift and go to state 102
    empty                          shift and go to state 103

state 74

    (74) no_condicional -> FOR . ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque

    ID              shift and go to state 104


state 75

    (47) func_esp_name_param -> LINE . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 105
    empty                          shift and go to state 101

state 76

    (48) func_esp_name_param -> POINT . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 106
    empty                          shift and go to state 101

state 77

    (49) func_esp_name_param -> CIRCLE . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 107
    empty                          shift and go to state 101

state 78

    (50) func_esp_name_param -> ARCUP . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 108
    empty                          shift and go to state 101

state 79

    (51) func_esp_name_param -> ARCDOWN . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 109
    empty                          shift and go to state 101

state 80

    (52) func_esp_name_param -> SETX . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 110
    empty                          shift and go to state 101

state 81

    (53) func_esp_name_param -> SETY . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 111
    empty                          shift and go to state 101

state 82

    (54) func_esp_name_param -> RIGHT . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 112
    empty                          shift and go to state 101

state 83

    (55) func_esp_name_param -> LEFT . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 113
    empty                          shift and go to state 101

state 84

    (56) func_esp_name_param -> PENSIZE . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 114
    empty                          shift and go to state 101

state 85

    (57) func_esp_name_no_param -> PENUP . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 115
    empty                          shift and go to state 101

state 86

    (58) func_esp_name_no_param -> PENDOWN . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 116
    empty                          shift and go to state 101

state 87

    (59) func_esp_name_no_param -> CLEAR . agregar_esp_func
    (129) agregar_esp_func -> . empty
    (102) empty -> .

    LPAREN          reduce using rule 102 (empty -> .)

    agregar_esp_func               shift and go to state 117
    empty                          shift and go to state 101

state 88

    (18) funs2 -> MODULE ID agregar_funs LPAREN . parametros RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN . parametros RPAREN vars bloque finalizar_funs funs
    (20) parametros -> . tipo ID agregar_param COMA parametros
    (21) parametros -> . tipo ID agregar_param
    (22) parametros -> . empty
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR
    (102) empty -> .

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18
    RPAREN          reduce using rule 102 (empty -> .)

    parametros                     shift and go to state 118
    tipo                           shift and go to state 119
    empty                          shift and go to state 120

state 89

    (23) bloque -> LBRACKET bloque1 RBRACKET .

    $end            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    FUNC            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    MAIN            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    ELSE            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    ID              reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    RETURN          reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    READ            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    WRITE           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    IF              reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    COLOR           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    WHILE           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    FOR             reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    LINE            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    POINT           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    CIRCLE          reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    ARCUP           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    ARCDOWN         reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    SETX            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    SETY            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    RIGHT           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    LEFT            reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENSIZE         reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENUP           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    PENDOWN         reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    CLEAR           reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)
    RBRACKET        reduce using rule 23 (bloque -> LBRACKET bloque1 RBRACKET .)


state 90

    (25) bloque1 -> estatuto bloque1 .

    RBRACKET        reduce using rule 25 (bloque1 -> estatuto bloque1 .)


state 91

    (35) asignacion -> exp_var EQUALS . agregar_exp_op expresion SEMICOLON agregar_cuad_asign
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 121
    empty                          shift and go to state 122

state 92

    (36) modulo_v -> ID agregar_cuad_era . LPAREN e RPAREN fin_func SEMICOLON
    (37) modulo_v -> ID agregar_cuad_era . LPAREN RPAREN fin_func SEMICOLON

    LPAREN          shift and go to state 123


state 93

    (126) agregar_cuad_era -> empty .

    LPAREN          reduce using rule 126 (agregar_cuad_era -> empty .)


state 94

    (38) return -> RETURN LPAREN . exp RPAREN SEMICOLON
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 125
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 95

    (39) lectura -> READ LPAREN . exp_var agregar_cuad_read lectura2
    (101) exp_var -> . ID

    ID              shift and go to state 139

    exp_var                        shift and go to state 138

state 96

    (60) escritura -> WRITE LPAREN . escritura2 RPAREN SEMICOLON
    (61) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (62) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (63) escritura2 -> . expresion agregar_cuad_print_exp
    (64) escritura2 -> . STRING agregar_cuad_print_str
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    STRING          shift and go to state 142
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    escritura2                     shift and go to state 140
    expresion                      shift and go to state 141
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 97

    (65) desicion -> IF LPAREN . expresion RPAREN agregar_cuad_if THEN bloque
    (66) desicion -> IF LPAREN . expresion RPAREN agregar_cuad_if THEN bloque else
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 145
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 98

    (42) func_esp -> func_esp_name_param LPAREN . exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 146
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 99

    (43) func_esp -> func_esp_name_no_param LPAREN . RPAREN agregar_cuad_esp_no_param_func SEMICOLON

    RPAREN          shift and go to state 147


state 100

    (44) func_esp -> COLOR agregar_esp_func . LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    LPAREN          shift and go to state 148


state 101

    (129) agregar_esp_func -> empty .

    LPAREN          reduce using rule 129 (agregar_esp_func -> empty .)


state 102

    (73) condicional -> WHILE agregar_while . LPAREN expresion RPAREN agregar_while_cond DO bloque

    LPAREN          shift and go to state 149


state 103

    (123) agregar_while -> empty .

    LPAREN          reduce using rule 123 (agregar_while -> empty .)


state 104

    (74) no_condicional -> FOR ID . agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque
    (120) agregar_for_var -> . empty
    (102) empty -> .

    EQUALS          reduce using rule 102 (empty -> .)

    agregar_for_var                shift and go to state 150
    empty                          shift and go to state 151

state 105

    (47) func_esp_name_param -> LINE agregar_esp_func .

    LPAREN          reduce using rule 47 (func_esp_name_param -> LINE agregar_esp_func .)


state 106

    (48) func_esp_name_param -> POINT agregar_esp_func .

    LPAREN          reduce using rule 48 (func_esp_name_param -> POINT agregar_esp_func .)


state 107

    (49) func_esp_name_param -> CIRCLE agregar_esp_func .

    LPAREN          reduce using rule 49 (func_esp_name_param -> CIRCLE agregar_esp_func .)


state 108

    (50) func_esp_name_param -> ARCUP agregar_esp_func .

    LPAREN          reduce using rule 50 (func_esp_name_param -> ARCUP agregar_esp_func .)


state 109

    (51) func_esp_name_param -> ARCDOWN agregar_esp_func .

    LPAREN          reduce using rule 51 (func_esp_name_param -> ARCDOWN agregar_esp_func .)


state 110

    (52) func_esp_name_param -> SETX agregar_esp_func .

    LPAREN          reduce using rule 52 (func_esp_name_param -> SETX agregar_esp_func .)


state 111

    (53) func_esp_name_param -> SETY agregar_esp_func .

    LPAREN          reduce using rule 53 (func_esp_name_param -> SETY agregar_esp_func .)


state 112

    (54) func_esp_name_param -> RIGHT agregar_esp_func .

    LPAREN          reduce using rule 54 (func_esp_name_param -> RIGHT agregar_esp_func .)


state 113

    (55) func_esp_name_param -> LEFT agregar_esp_func .

    LPAREN          reduce using rule 55 (func_esp_name_param -> LEFT agregar_esp_func .)


state 114

    (56) func_esp_name_param -> PENSIZE agregar_esp_func .

    LPAREN          reduce using rule 56 (func_esp_name_param -> PENSIZE agregar_esp_func .)


state 115

    (57) func_esp_name_no_param -> PENUP agregar_esp_func .

    LPAREN          reduce using rule 57 (func_esp_name_no_param -> PENUP agregar_esp_func .)


state 116

    (58) func_esp_name_no_param -> PENDOWN agregar_esp_func .

    LPAREN          reduce using rule 58 (func_esp_name_no_param -> PENDOWN agregar_esp_func .)


state 117

    (59) func_esp_name_no_param -> CLEAR agregar_esp_func .

    LPAREN          reduce using rule 59 (func_esp_name_no_param -> CLEAR agregar_esp_func .)


state 118

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros . RPAREN vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros . RPAREN vars bloque finalizar_funs funs

    RPAREN          shift and go to state 152


state 119

    (20) parametros -> tipo . ID agregar_param COMA parametros
    (21) parametros -> tipo . ID agregar_param

    ID              shift and go to state 153


state 120

    (22) parametros -> empty .

    RPAREN          reduce using rule 22 (parametros -> empty .)


state 121

    (35) asignacion -> exp_var EQUALS agregar_exp_op . expresion SEMICOLON agregar_cuad_asign
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp_var                        shift and go to state 133
    expresion                      shift and go to state 154
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132

state 122

    (105) agregar_exp_op -> empty .

    PLUS            reduce using rule 105 (agregar_exp_op -> empty .)
    MINUS           reduce using rule 105 (agregar_exp_op -> empty .)
    LPAREN          reduce using rule 105 (agregar_exp_op -> empty .)
    ID              reduce using rule 105 (agregar_exp_op -> empty .)
    INT             reduce using rule 105 (agregar_exp_op -> empty .)
    FLOAT           reduce using rule 105 (agregar_exp_op -> empty .)
    CHAR            reduce using rule 105 (agregar_exp_op -> empty .)


state 123

    (36) modulo_v -> ID agregar_cuad_era LPAREN . e RPAREN fin_func SEMICOLON
    (37) modulo_v -> ID agregar_cuad_era LPAREN . RPAREN fin_func SEMICOLON
    (45) e -> . exp agregar_param_check COMA e
    (46) e -> . exp agregar_param_check
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    RPAREN          shift and go to state 156
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    e                              shift and go to state 155
    exp                            shift and go to state 157
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 124

    (98) factor_paren -> LPAREN . agregar_exp_op expresion RPAREN
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 158
    empty                          shift and go to state 122

state 125

    (38) return -> RETURN LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 159


state 126

    (86) exp -> termino . agregar_cuad_arith
    (87) exp -> termino . agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> termino . agregar_cuad_arith MINUS agregar_exp_op exp
    (112) agregar_cuad_arith -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    MRTHAN          reduce using rule 102 (empty -> .)
    LSTHAN          reduce using rule 102 (empty -> .)
    LSETHAN         reduce using rule 102 (empty -> .)
    MRETHAN         reduce using rule 102 (empty -> .)
    DOUBLE          reduce using rule 102 (empty -> .)
    NOT_EQUALS      reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    DO              reduce using rule 102 (empty -> .)

    agregar_cuad_arith             shift and go to state 160
    empty                          shift and go to state 161

state 127

    (93) factor -> PLUS . var_cte
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR

    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    var_cte                        shift and go to state 162

state 128

    (94) factor -> MINUS . var_cte
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR

    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    var_cte                        shift and go to state 163

state 129

    (89) termino -> factor . agregar_cuad_factor
    (90) termino -> factor . agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> factor . agregar_cuad_factor DIVIDE agregar_exp_op termino
    (113) agregar_cuad_factor -> . empty
    (102) empty -> .

    TIMES           reduce using rule 102 (empty -> .)
    DIVIDE          reduce using rule 102 (empty -> .)
    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    MRTHAN          reduce using rule 102 (empty -> .)
    LSTHAN          reduce using rule 102 (empty -> .)
    LSETHAN         reduce using rule 102 (empty -> .)
    MRETHAN         reduce using rule 102 (empty -> .)
    DOUBLE          reduce using rule 102 (empty -> .)
    NOT_EQUALS      reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    DO              reduce using rule 102 (empty -> .)

    agregar_cuad_factor            shift and go to state 164
    empty                          shift and go to state 165

state 130

    (92) factor -> factor_paren .

    TIMES           reduce using rule 92 (factor -> factor_paren .)
    DIVIDE          reduce using rule 92 (factor -> factor_paren .)
    PLUS            reduce using rule 92 (factor -> factor_paren .)
    MINUS           reduce using rule 92 (factor -> factor_paren .)
    RPAREN          reduce using rule 92 (factor -> factor_paren .)
    MRTHAN          reduce using rule 92 (factor -> factor_paren .)
    LSTHAN          reduce using rule 92 (factor -> factor_paren .)
    LSETHAN         reduce using rule 92 (factor -> factor_paren .)
    MRETHAN         reduce using rule 92 (factor -> factor_paren .)
    DOUBLE          reduce using rule 92 (factor -> factor_paren .)
    NOT_EQUALS      reduce using rule 92 (factor -> factor_paren .)
    AND             reduce using rule 92 (factor -> factor_paren .)
    OR              reduce using rule 92 (factor -> factor_paren .)
    COMA            reduce using rule 92 (factor -> factor_paren .)
    SEMICOLON       reduce using rule 92 (factor -> factor_paren .)
    TO              reduce using rule 92 (factor -> factor_paren .)
    DO              reduce using rule 92 (factor -> factor_paren .)


state 131

    (96) factor -> var_cte .

    TIMES           reduce using rule 96 (factor -> var_cte .)
    DIVIDE          reduce using rule 96 (factor -> var_cte .)
    PLUS            reduce using rule 96 (factor -> var_cte .)
    MINUS           reduce using rule 96 (factor -> var_cte .)
    RPAREN          reduce using rule 96 (factor -> var_cte .)
    MRTHAN          reduce using rule 96 (factor -> var_cte .)
    LSTHAN          reduce using rule 96 (factor -> var_cte .)
    LSETHAN         reduce using rule 96 (factor -> var_cte .)
    MRETHAN         reduce using rule 96 (factor -> var_cte .)
    DOUBLE          reduce using rule 96 (factor -> var_cte .)
    NOT_EQUALS      reduce using rule 96 (factor -> var_cte .)
    AND             reduce using rule 96 (factor -> var_cte .)
    OR              reduce using rule 96 (factor -> var_cte .)
    COMA            reduce using rule 96 (factor -> var_cte .)
    SEMICOLON       reduce using rule 96 (factor -> var_cte .)
    TO              reduce using rule 96 (factor -> var_cte .)
    DO              reduce using rule 96 (factor -> var_cte .)


state 132

    (95) factor -> return_func .

    TIMES           reduce using rule 95 (factor -> return_func .)
    DIVIDE          reduce using rule 95 (factor -> return_func .)
    PLUS            reduce using rule 95 (factor -> return_func .)
    MINUS           reduce using rule 95 (factor -> return_func .)
    RPAREN          reduce using rule 95 (factor -> return_func .)
    MRTHAN          reduce using rule 95 (factor -> return_func .)
    LSTHAN          reduce using rule 95 (factor -> return_func .)
    LSETHAN         reduce using rule 95 (factor -> return_func .)
    MRETHAN         reduce using rule 95 (factor -> return_func .)
    DOUBLE          reduce using rule 95 (factor -> return_func .)
    NOT_EQUALS      reduce using rule 95 (factor -> return_func .)
    AND             reduce using rule 95 (factor -> return_func .)
    OR              reduce using rule 95 (factor -> return_func .)
    COMA            reduce using rule 95 (factor -> return_func .)
    SEMICOLON       reduce using rule 95 (factor -> return_func .)
    TO              reduce using rule 95 (factor -> return_func .)
    DO              reduce using rule 95 (factor -> return_func .)


state 133

    (97) factor -> exp_var .

    TIMES           reduce using rule 97 (factor -> exp_var .)
    DIVIDE          reduce using rule 97 (factor -> exp_var .)
    PLUS            reduce using rule 97 (factor -> exp_var .)
    MINUS           reduce using rule 97 (factor -> exp_var .)
    RPAREN          reduce using rule 97 (factor -> exp_var .)
    MRTHAN          reduce using rule 97 (factor -> exp_var .)
    LSTHAN          reduce using rule 97 (factor -> exp_var .)
    LSETHAN         reduce using rule 97 (factor -> exp_var .)
    MRETHAN         reduce using rule 97 (factor -> exp_var .)
    DOUBLE          reduce using rule 97 (factor -> exp_var .)
    NOT_EQUALS      reduce using rule 97 (factor -> exp_var .)
    AND             reduce using rule 97 (factor -> exp_var .)
    OR              reduce using rule 97 (factor -> exp_var .)
    COMA            reduce using rule 97 (factor -> exp_var .)
    SEMICOLON       reduce using rule 97 (factor -> exp_var .)
    TO              reduce using rule 97 (factor -> exp_var .)
    DO              reduce using rule 97 (factor -> exp_var .)


state 134

    (99) return_func -> ID . agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> ID . agregar_cuad_era LPAREN RPAREN fin_func
    (101) exp_var -> ID .
    (126) agregar_cuad_era -> . empty
    (102) empty -> .

    TIMES           reduce using rule 101 (exp_var -> ID .)
    DIVIDE          reduce using rule 101 (exp_var -> ID .)
    PLUS            reduce using rule 101 (exp_var -> ID .)
    MINUS           reduce using rule 101 (exp_var -> ID .)
    RPAREN          reduce using rule 101 (exp_var -> ID .)
    MRTHAN          reduce using rule 101 (exp_var -> ID .)
    LSTHAN          reduce using rule 101 (exp_var -> ID .)
    LSETHAN         reduce using rule 101 (exp_var -> ID .)
    MRETHAN         reduce using rule 101 (exp_var -> ID .)
    DOUBLE          reduce using rule 101 (exp_var -> ID .)
    NOT_EQUALS      reduce using rule 101 (exp_var -> ID .)
    AND             reduce using rule 101 (exp_var -> ID .)
    OR              reduce using rule 101 (exp_var -> ID .)
    COMA            reduce using rule 101 (exp_var -> ID .)
    SEMICOLON       reduce using rule 101 (exp_var -> ID .)
    TO              reduce using rule 101 (exp_var -> ID .)
    DO              reduce using rule 101 (exp_var -> ID .)
    LPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_era               shift and go to state 166
    empty                          shift and go to state 93

state 135

    (68) var_cte -> INT .

    TIMES           reduce using rule 68 (var_cte -> INT .)
    DIVIDE          reduce using rule 68 (var_cte -> INT .)
    PLUS            reduce using rule 68 (var_cte -> INT .)
    MINUS           reduce using rule 68 (var_cte -> INT .)
    RPAREN          reduce using rule 68 (var_cte -> INT .)
    MRTHAN          reduce using rule 68 (var_cte -> INT .)
    LSTHAN          reduce using rule 68 (var_cte -> INT .)
    LSETHAN         reduce using rule 68 (var_cte -> INT .)
    MRETHAN         reduce using rule 68 (var_cte -> INT .)
    DOUBLE          reduce using rule 68 (var_cte -> INT .)
    NOT_EQUALS      reduce using rule 68 (var_cte -> INT .)
    AND             reduce using rule 68 (var_cte -> INT .)
    OR              reduce using rule 68 (var_cte -> INT .)
    COMA            reduce using rule 68 (var_cte -> INT .)
    SEMICOLON       reduce using rule 68 (var_cte -> INT .)
    TO              reduce using rule 68 (var_cte -> INT .)
    DO              reduce using rule 68 (var_cte -> INT .)


state 136

    (69) var_cte -> FLOAT .

    TIMES           reduce using rule 69 (var_cte -> FLOAT .)
    DIVIDE          reduce using rule 69 (var_cte -> FLOAT .)
    PLUS            reduce using rule 69 (var_cte -> FLOAT .)
    MINUS           reduce using rule 69 (var_cte -> FLOAT .)
    RPAREN          reduce using rule 69 (var_cte -> FLOAT .)
    MRTHAN          reduce using rule 69 (var_cte -> FLOAT .)
    LSTHAN          reduce using rule 69 (var_cte -> FLOAT .)
    LSETHAN         reduce using rule 69 (var_cte -> FLOAT .)
    MRETHAN         reduce using rule 69 (var_cte -> FLOAT .)
    DOUBLE          reduce using rule 69 (var_cte -> FLOAT .)
    NOT_EQUALS      reduce using rule 69 (var_cte -> FLOAT .)
    AND             reduce using rule 69 (var_cte -> FLOAT .)
    OR              reduce using rule 69 (var_cte -> FLOAT .)
    COMA            reduce using rule 69 (var_cte -> FLOAT .)
    SEMICOLON       reduce using rule 69 (var_cte -> FLOAT .)
    TO              reduce using rule 69 (var_cte -> FLOAT .)
    DO              reduce using rule 69 (var_cte -> FLOAT .)


state 137

    (70) var_cte -> CHAR .

    TIMES           reduce using rule 70 (var_cte -> CHAR .)
    DIVIDE          reduce using rule 70 (var_cte -> CHAR .)
    PLUS            reduce using rule 70 (var_cte -> CHAR .)
    MINUS           reduce using rule 70 (var_cte -> CHAR .)
    RPAREN          reduce using rule 70 (var_cte -> CHAR .)
    MRTHAN          reduce using rule 70 (var_cte -> CHAR .)
    LSTHAN          reduce using rule 70 (var_cte -> CHAR .)
    LSETHAN         reduce using rule 70 (var_cte -> CHAR .)
    MRETHAN         reduce using rule 70 (var_cte -> CHAR .)
    DOUBLE          reduce using rule 70 (var_cte -> CHAR .)
    NOT_EQUALS      reduce using rule 70 (var_cte -> CHAR .)
    AND             reduce using rule 70 (var_cte -> CHAR .)
    OR              reduce using rule 70 (var_cte -> CHAR .)
    COMA            reduce using rule 70 (var_cte -> CHAR .)
    SEMICOLON       reduce using rule 70 (var_cte -> CHAR .)
    TO              reduce using rule 70 (var_cte -> CHAR .)
    DO              reduce using rule 70 (var_cte -> CHAR .)


state 138

    (39) lectura -> READ LPAREN exp_var . agregar_cuad_read lectura2
    (115) agregar_cuad_read -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_read              shift and go to state 167
    empty                          shift and go to state 168

state 139

    (101) exp_var -> ID .

    COMA            reduce using rule 101 (exp_var -> ID .)
    RPAREN          reduce using rule 101 (exp_var -> ID .)


state 140

    (60) escritura -> WRITE LPAREN escritura2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 169


state 141

    (61) escritura2 -> expresion . agregar_cuad_print_exp COMA escritura2
    (63) escritura2 -> expresion . agregar_cuad_print_exp
    (117) agregar_cuad_print_exp -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_print_exp         shift and go to state 170
    empty                          shift and go to state 171

state 142

    (62) escritura2 -> STRING . agregar_cuad_print_str COMA escritura2
    (64) escritura2 -> STRING . agregar_cuad_print_str
    (116) agregar_cuad_print_str -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_print_str         shift and go to state 172
    empty                          shift and go to state 173

state 143

    (75) expresion -> exp_comp . agregar_cuad_log exp_log
    (110) agregar_cuad_log -> . empty
    (102) empty -> .

    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_log               shift and go to state 174
    empty                          shift and go to state 175

state 144

    (79) exp_comp -> exp . agregar_cuad_comp
    (80) exp_comp -> exp . agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> exp . agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> exp . agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> exp . agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> exp . agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> exp . agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (111) agregar_cuad_comp -> . empty
    (102) empty -> .

    MRTHAN          reduce using rule 102 (empty -> .)
    LSTHAN          reduce using rule 102 (empty -> .)
    LSETHAN         reduce using rule 102 (empty -> .)
    MRETHAN         reduce using rule 102 (empty -> .)
    DOUBLE          reduce using rule 102 (empty -> .)
    NOT_EQUALS      reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_comp              shift and go to state 176
    empty                          shift and go to state 177

state 145

    (65) desicion -> IF LPAREN expresion . RPAREN agregar_cuad_if THEN bloque
    (66) desicion -> IF LPAREN expresion . RPAREN agregar_cuad_if THEN bloque else

    RPAREN          shift and go to state 178


state 146

    (42) func_esp -> func_esp_name_param LPAREN exp . RPAREN agregar_cuad_esp_param_func SEMICOLON

    RPAREN          shift and go to state 179


state 147

    (43) func_esp -> func_esp_name_no_param LPAREN RPAREN . agregar_cuad_esp_no_param_func SEMICOLON
    (131) agregar_cuad_esp_no_param_func -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_esp_no_param_func shift and go to state 180
    empty                          shift and go to state 181

state 148

    (44) func_esp -> COLOR agregar_esp_func LPAREN . exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 182
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 149

    (73) condicional -> WHILE agregar_while LPAREN . expresion RPAREN agregar_while_cond DO bloque
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 183
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 150

    (74) no_condicional -> FOR ID agregar_for_var . EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque

    EQUALS          shift and go to state 184


state 151

    (120) agregar_for_var -> empty .

    EQUALS          reduce using rule 120 (agregar_for_var -> empty .)


state 152

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN . vars bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN . vars bloque finalizar_funs funs
    (4) vars -> . VAR vars2
    (5) vars -> . empty
    (102) empty -> .

    VAR             shift and go to state 9
    LBRACKET        reduce using rule 102 (empty -> .)

    vars                           shift and go to state 185
    empty                          shift and go to state 10

state 153

    (20) parametros -> tipo ID . agregar_param COMA parametros
    (21) parametros -> tipo ID . agregar_param
    (104) agregar_param -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_param                  shift and go to state 186
    empty                          shift and go to state 187

state 154

    (35) asignacion -> exp_var EQUALS agregar_exp_op expresion . SEMICOLON agregar_cuad_asign

    SEMICOLON       shift and go to state 188


state 155

    (36) modulo_v -> ID agregar_cuad_era LPAREN e . RPAREN fin_func SEMICOLON

    RPAREN          shift and go to state 189


state 156

    (37) modulo_v -> ID agregar_cuad_era LPAREN RPAREN . fin_func SEMICOLON
    (128) fin_func -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    fin_func                       shift and go to state 190
    empty                          shift and go to state 191

state 157

    (45) e -> exp . agregar_param_check COMA e
    (46) e -> exp . agregar_param_check
    (127) agregar_param_check -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_param_check            shift and go to state 192
    empty                          shift and go to state 193

state 158

    (98) factor_paren -> LPAREN agregar_exp_op . expresion RPAREN
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 194
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 159

    (38) return -> RETURN LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 195


state 160

    (86) exp -> termino agregar_cuad_arith .
    (87) exp -> termino agregar_cuad_arith . PLUS agregar_exp_op exp
    (88) exp -> termino agregar_cuad_arith . MINUS agregar_exp_op exp

    RPAREN          reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    MRTHAN          reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    LSTHAN          reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    LSETHAN         reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    MRETHAN         reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    DOUBLE          reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    NOT_EQUALS      reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    AND             reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    OR              reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    COMA            reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    SEMICOLON       reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    TO              reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    DO              reduce using rule 86 (exp -> termino agregar_cuad_arith .)
    PLUS            shift and go to state 196
    MINUS           shift and go to state 197


state 161

    (112) agregar_cuad_arith -> empty .

    PLUS            reduce using rule 112 (agregar_cuad_arith -> empty .)
    MINUS           reduce using rule 112 (agregar_cuad_arith -> empty .)
    RPAREN          reduce using rule 112 (agregar_cuad_arith -> empty .)
    MRTHAN          reduce using rule 112 (agregar_cuad_arith -> empty .)
    LSTHAN          reduce using rule 112 (agregar_cuad_arith -> empty .)
    LSETHAN         reduce using rule 112 (agregar_cuad_arith -> empty .)
    MRETHAN         reduce using rule 112 (agregar_cuad_arith -> empty .)
    DOUBLE          reduce using rule 112 (agregar_cuad_arith -> empty .)
    NOT_EQUALS      reduce using rule 112 (agregar_cuad_arith -> empty .)
    AND             reduce using rule 112 (agregar_cuad_arith -> empty .)
    OR              reduce using rule 112 (agregar_cuad_arith -> empty .)
    COMA            reduce using rule 112 (agregar_cuad_arith -> empty .)
    SEMICOLON       reduce using rule 112 (agregar_cuad_arith -> empty .)
    TO              reduce using rule 112 (agregar_cuad_arith -> empty .)
    DO              reduce using rule 112 (agregar_cuad_arith -> empty .)


state 162

    (93) factor -> PLUS var_cte .

    TIMES           reduce using rule 93 (factor -> PLUS var_cte .)
    DIVIDE          reduce using rule 93 (factor -> PLUS var_cte .)
    PLUS            reduce using rule 93 (factor -> PLUS var_cte .)
    MINUS           reduce using rule 93 (factor -> PLUS var_cte .)
    RPAREN          reduce using rule 93 (factor -> PLUS var_cte .)
    MRTHAN          reduce using rule 93 (factor -> PLUS var_cte .)
    LSTHAN          reduce using rule 93 (factor -> PLUS var_cte .)
    LSETHAN         reduce using rule 93 (factor -> PLUS var_cte .)
    MRETHAN         reduce using rule 93 (factor -> PLUS var_cte .)
    DOUBLE          reduce using rule 93 (factor -> PLUS var_cte .)
    NOT_EQUALS      reduce using rule 93 (factor -> PLUS var_cte .)
    AND             reduce using rule 93 (factor -> PLUS var_cte .)
    OR              reduce using rule 93 (factor -> PLUS var_cte .)
    COMA            reduce using rule 93 (factor -> PLUS var_cte .)
    SEMICOLON       reduce using rule 93 (factor -> PLUS var_cte .)
    TO              reduce using rule 93 (factor -> PLUS var_cte .)
    DO              reduce using rule 93 (factor -> PLUS var_cte .)


state 163

    (94) factor -> MINUS var_cte .

    TIMES           reduce using rule 94 (factor -> MINUS var_cte .)
    DIVIDE          reduce using rule 94 (factor -> MINUS var_cte .)
    PLUS            reduce using rule 94 (factor -> MINUS var_cte .)
    MINUS           reduce using rule 94 (factor -> MINUS var_cte .)
    RPAREN          reduce using rule 94 (factor -> MINUS var_cte .)
    MRTHAN          reduce using rule 94 (factor -> MINUS var_cte .)
    LSTHAN          reduce using rule 94 (factor -> MINUS var_cte .)
    LSETHAN         reduce using rule 94 (factor -> MINUS var_cte .)
    MRETHAN         reduce using rule 94 (factor -> MINUS var_cte .)
    DOUBLE          reduce using rule 94 (factor -> MINUS var_cte .)
    NOT_EQUALS      reduce using rule 94 (factor -> MINUS var_cte .)
    AND             reduce using rule 94 (factor -> MINUS var_cte .)
    OR              reduce using rule 94 (factor -> MINUS var_cte .)
    COMA            reduce using rule 94 (factor -> MINUS var_cte .)
    SEMICOLON       reduce using rule 94 (factor -> MINUS var_cte .)
    TO              reduce using rule 94 (factor -> MINUS var_cte .)
    DO              reduce using rule 94 (factor -> MINUS var_cte .)


state 164

    (89) termino -> factor agregar_cuad_factor .
    (90) termino -> factor agregar_cuad_factor . TIMES agregar_exp_op termino
    (91) termino -> factor agregar_cuad_factor . DIVIDE agregar_exp_op termino

    PLUS            reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    MINUS           reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    RPAREN          reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    MRTHAN          reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    LSTHAN          reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    LSETHAN         reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    MRETHAN         reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    DOUBLE          reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    NOT_EQUALS      reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    AND             reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    OR              reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    COMA            reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    SEMICOLON       reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    TO              reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    DO              reduce using rule 89 (termino -> factor agregar_cuad_factor .)
    TIMES           shift and go to state 198
    DIVIDE          shift and go to state 199


state 165

    (113) agregar_cuad_factor -> empty .

    TIMES           reduce using rule 113 (agregar_cuad_factor -> empty .)
    DIVIDE          reduce using rule 113 (agregar_cuad_factor -> empty .)
    PLUS            reduce using rule 113 (agregar_cuad_factor -> empty .)
    MINUS           reduce using rule 113 (agregar_cuad_factor -> empty .)
    RPAREN          reduce using rule 113 (agregar_cuad_factor -> empty .)
    MRTHAN          reduce using rule 113 (agregar_cuad_factor -> empty .)
    LSTHAN          reduce using rule 113 (agregar_cuad_factor -> empty .)
    LSETHAN         reduce using rule 113 (agregar_cuad_factor -> empty .)
    MRETHAN         reduce using rule 113 (agregar_cuad_factor -> empty .)
    DOUBLE          reduce using rule 113 (agregar_cuad_factor -> empty .)
    NOT_EQUALS      reduce using rule 113 (agregar_cuad_factor -> empty .)
    AND             reduce using rule 113 (agregar_cuad_factor -> empty .)
    OR              reduce using rule 113 (agregar_cuad_factor -> empty .)
    COMA            reduce using rule 113 (agregar_cuad_factor -> empty .)
    SEMICOLON       reduce using rule 113 (agregar_cuad_factor -> empty .)
    TO              reduce using rule 113 (agregar_cuad_factor -> empty .)
    DO              reduce using rule 113 (agregar_cuad_factor -> empty .)


state 166

    (99) return_func -> ID agregar_cuad_era . LPAREN e RPAREN fin_func
    (100) return_func -> ID agregar_cuad_era . LPAREN RPAREN fin_func

    LPAREN          shift and go to state 200


state 167

    (39) lectura -> READ LPAREN exp_var agregar_cuad_read . lectura2
    (40) lectura2 -> . COMA exp_var agregar_cuad_read lectura2
    (41) lectura2 -> . RPAREN SEMICOLON

    COMA            shift and go to state 202
    RPAREN          shift and go to state 203

    lectura2                       shift and go to state 201

state 168

    (115) agregar_cuad_read -> empty .

    COMA            reduce using rule 115 (agregar_cuad_read -> empty .)
    RPAREN          reduce using rule 115 (agregar_cuad_read -> empty .)


state 169

    (60) escritura -> WRITE LPAREN escritura2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 204


state 170

    (61) escritura2 -> expresion agregar_cuad_print_exp . COMA escritura2
    (63) escritura2 -> expresion agregar_cuad_print_exp .

    COMA            shift and go to state 205
    RPAREN          reduce using rule 63 (escritura2 -> expresion agregar_cuad_print_exp .)


state 171

    (117) agregar_cuad_print_exp -> empty .

    COMA            reduce using rule 117 (agregar_cuad_print_exp -> empty .)
    RPAREN          reduce using rule 117 (agregar_cuad_print_exp -> empty .)


state 172

    (62) escritura2 -> STRING agregar_cuad_print_str . COMA escritura2
    (64) escritura2 -> STRING agregar_cuad_print_str .

    COMA            shift and go to state 206
    RPAREN          reduce using rule 64 (escritura2 -> STRING agregar_cuad_print_str .)


state 173

    (116) agregar_cuad_print_str -> empty .

    COMA            reduce using rule 116 (agregar_cuad_print_str -> empty .)
    RPAREN          reduce using rule 116 (agregar_cuad_print_str -> empty .)


state 174

    (75) expresion -> exp_comp agregar_cuad_log . exp_log
    (76) exp_log -> . AND agregar_exp_op expresion
    (77) exp_log -> . OR agregar_exp_op expresion
    (78) exp_log -> . empty
    (102) empty -> .

    AND             shift and go to state 208
    OR              shift and go to state 209
    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)

    exp_log                        shift and go to state 207
    empty                          shift and go to state 210

state 175

    (110) agregar_cuad_log -> empty .

    AND             reduce using rule 110 (agregar_cuad_log -> empty .)
    OR              reduce using rule 110 (agregar_cuad_log -> empty .)
    COMA            reduce using rule 110 (agregar_cuad_log -> empty .)
    RPAREN          reduce using rule 110 (agregar_cuad_log -> empty .)
    SEMICOLON       reduce using rule 110 (agregar_cuad_log -> empty .)


state 176

    (79) exp_comp -> exp agregar_cuad_comp .
    (80) exp_comp -> exp agregar_cuad_comp . MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> exp agregar_cuad_comp . LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> exp agregar_cuad_comp . LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> exp agregar_cuad_comp . MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> exp agregar_cuad_comp . DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> exp agregar_cuad_comp . NOT_EQUALS agregar_exp_op exp_comp

    AND             reduce using rule 79 (exp_comp -> exp agregar_cuad_comp .)
    OR              reduce using rule 79 (exp_comp -> exp agregar_cuad_comp .)
    COMA            reduce using rule 79 (exp_comp -> exp agregar_cuad_comp .)
    RPAREN          reduce using rule 79 (exp_comp -> exp agregar_cuad_comp .)
    SEMICOLON       reduce using rule 79 (exp_comp -> exp agregar_cuad_comp .)
    MRTHAN          shift and go to state 211
    LSTHAN          shift and go to state 212
    LSETHAN         shift and go to state 213
    MRETHAN         shift and go to state 214
    DOUBLE          shift and go to state 215
    NOT_EQUALS      shift and go to state 216


state 177

    (111) agregar_cuad_comp -> empty .

    MRTHAN          reduce using rule 111 (agregar_cuad_comp -> empty .)
    LSTHAN          reduce using rule 111 (agregar_cuad_comp -> empty .)
    LSETHAN         reduce using rule 111 (agregar_cuad_comp -> empty .)
    MRETHAN         reduce using rule 111 (agregar_cuad_comp -> empty .)
    DOUBLE          reduce using rule 111 (agregar_cuad_comp -> empty .)
    NOT_EQUALS      reduce using rule 111 (agregar_cuad_comp -> empty .)
    AND             reduce using rule 111 (agregar_cuad_comp -> empty .)
    OR              reduce using rule 111 (agregar_cuad_comp -> empty .)
    COMA            reduce using rule 111 (agregar_cuad_comp -> empty .)
    RPAREN          reduce using rule 111 (agregar_cuad_comp -> empty .)
    SEMICOLON       reduce using rule 111 (agregar_cuad_comp -> empty .)


state 178

    (65) desicion -> IF LPAREN expresion RPAREN . agregar_cuad_if THEN bloque
    (66) desicion -> IF LPAREN expresion RPAREN . agregar_cuad_if THEN bloque else
    (118) agregar_cuad_if -> . empty
    (102) empty -> .

    THEN            reduce using rule 102 (empty -> .)

    agregar_cuad_if                shift and go to state 217
    empty                          shift and go to state 218

state 179

    (42) func_esp -> func_esp_name_param LPAREN exp RPAREN . agregar_cuad_esp_param_func SEMICOLON
    (130) agregar_cuad_esp_param_func -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_esp_param_func    shift and go to state 219
    empty                          shift and go to state 220

state 180

    (43) func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func . SEMICOLON

    SEMICOLON       shift and go to state 221


state 181

    (131) agregar_cuad_esp_no_param_func -> empty .

    SEMICOLON       reduce using rule 131 (agregar_cuad_esp_no_param_func -> empty .)


state 182

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp . COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    COMA            shift and go to state 222


state 183

    (73) condicional -> WHILE agregar_while LPAREN expresion . RPAREN agregar_while_cond DO bloque

    RPAREN          shift and go to state 223


state 184

    (74) no_condicional -> FOR ID agregar_for_var EQUALS . exp igualar_for_var TO exp agregar_for_cond DO bloque
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 224
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 185

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars . bloque finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars . bloque finalizar_funs funs
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 225

state 186

    (20) parametros -> tipo ID agregar_param . COMA parametros
    (21) parametros -> tipo ID agregar_param .

    COMA            shift and go to state 226
    RPAREN          reduce using rule 21 (parametros -> tipo ID agregar_param .)


state 187

    (104) agregar_param -> empty .

    COMA            reduce using rule 104 (agregar_param -> empty .)
    RPAREN          reduce using rule 104 (agregar_param -> empty .)


state 188

    (35) asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON . agregar_cuad_asign
    (114) agregar_cuad_asign -> . empty
    (102) empty -> .

    ID              reduce using rule 102 (empty -> .)
    RETURN          reduce using rule 102 (empty -> .)
    READ            reduce using rule 102 (empty -> .)
    WRITE           reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    COLOR           reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    LINE            reduce using rule 102 (empty -> .)
    POINT           reduce using rule 102 (empty -> .)
    CIRCLE          reduce using rule 102 (empty -> .)
    ARCUP           reduce using rule 102 (empty -> .)
    ARCDOWN         reduce using rule 102 (empty -> .)
    SETX            reduce using rule 102 (empty -> .)
    SETY            reduce using rule 102 (empty -> .)
    RIGHT           reduce using rule 102 (empty -> .)
    LEFT            reduce using rule 102 (empty -> .)
    PENSIZE         reduce using rule 102 (empty -> .)
    PENUP           reduce using rule 102 (empty -> .)
    PENDOWN         reduce using rule 102 (empty -> .)
    CLEAR           reduce using rule 102 (empty -> .)
    RBRACKET        reduce using rule 102 (empty -> .)

    agregar_cuad_asign             shift and go to state 227
    empty                          shift and go to state 228

state 189

    (36) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN . fin_func SEMICOLON
    (128) fin_func -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    fin_func                       shift and go to state 229
    empty                          shift and go to state 191

state 190

    (37) modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func . SEMICOLON

    SEMICOLON       shift and go to state 230


state 191

    (128) fin_func -> empty .

    SEMICOLON       reduce using rule 128 (fin_func -> empty .)
    TIMES           reduce using rule 128 (fin_func -> empty .)
    DIVIDE          reduce using rule 128 (fin_func -> empty .)
    PLUS            reduce using rule 128 (fin_func -> empty .)
    MINUS           reduce using rule 128 (fin_func -> empty .)
    RPAREN          reduce using rule 128 (fin_func -> empty .)
    MRTHAN          reduce using rule 128 (fin_func -> empty .)
    LSTHAN          reduce using rule 128 (fin_func -> empty .)
    LSETHAN         reduce using rule 128 (fin_func -> empty .)
    MRETHAN         reduce using rule 128 (fin_func -> empty .)
    DOUBLE          reduce using rule 128 (fin_func -> empty .)
    NOT_EQUALS      reduce using rule 128 (fin_func -> empty .)
    AND             reduce using rule 128 (fin_func -> empty .)
    OR              reduce using rule 128 (fin_func -> empty .)
    COMA            reduce using rule 128 (fin_func -> empty .)
    TO              reduce using rule 128 (fin_func -> empty .)
    DO              reduce using rule 128 (fin_func -> empty .)


state 192

    (45) e -> exp agregar_param_check . COMA e
    (46) e -> exp agregar_param_check .

    COMA            shift and go to state 231
    RPAREN          reduce using rule 46 (e -> exp agregar_param_check .)


state 193

    (127) agregar_param_check -> empty .

    COMA            reduce using rule 127 (agregar_param_check -> empty .)
    RPAREN          reduce using rule 127 (agregar_param_check -> empty .)


state 194

    (98) factor_paren -> LPAREN agregar_exp_op expresion . RPAREN

    RPAREN          shift and go to state 232


state 195

    (38) return -> RETURN LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    READ            reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    WRITE           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    LINE            reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    POINT           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    ARCUP           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    SETX            reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    SETY            reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RIGHT           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    LEFT            reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENUP           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    CLEAR           reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 38 (return -> RETURN LPAREN exp RPAREN SEMICOLON .)


state 196

    (87) exp -> termino agregar_cuad_arith PLUS . agregar_exp_op exp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 233
    empty                          shift and go to state 122

state 197

    (88) exp -> termino agregar_cuad_arith MINUS . agregar_exp_op exp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 234
    empty                          shift and go to state 122

state 198

    (90) termino -> factor agregar_cuad_factor TIMES . agregar_exp_op termino
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 235
    empty                          shift and go to state 122

state 199

    (91) termino -> factor agregar_cuad_factor DIVIDE . agregar_exp_op termino
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 236
    empty                          shift and go to state 122

state 200

    (99) return_func -> ID agregar_cuad_era LPAREN . e RPAREN fin_func
    (100) return_func -> ID agregar_cuad_era LPAREN . RPAREN fin_func
    (45) e -> . exp agregar_param_check COMA e
    (46) e -> . exp agregar_param_check
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    RPAREN          shift and go to state 238
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    e                              shift and go to state 237
    exp                            shift and go to state 157
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 201

    (39) lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .

    ID              reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RETURN          reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    READ            reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    WRITE           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    IF              reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    COLOR           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    WHILE           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    FOR             reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    LINE            reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    POINT           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    CIRCLE          reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    ARCUP           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    ARCDOWN         reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    SETX            reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    SETY            reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RIGHT           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    LEFT            reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENSIZE         reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENUP           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    PENDOWN         reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    CLEAR           reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)
    RBRACKET        reduce using rule 39 (lectura -> READ LPAREN exp_var agregar_cuad_read lectura2 .)


state 202

    (40) lectura2 -> COMA . exp_var agregar_cuad_read lectura2
    (101) exp_var -> . ID

    ID              shift and go to state 139

    exp_var                        shift and go to state 239

state 203

    (41) lectura2 -> RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 240


state 204

    (60) escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .

    ID              reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    READ            reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    IF              reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    COLOR           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    FOR             reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    LINE            reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    POINT           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    ARCUP           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    SETX            reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    SETY            reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RIGHT           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    LEFT            reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENUP           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    CLEAR           reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 60 (escritura -> WRITE LPAREN escritura2 RPAREN SEMICOLON .)


state 205

    (61) escritura2 -> expresion agregar_cuad_print_exp COMA . escritura2
    (61) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (62) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (63) escritura2 -> . expresion agregar_cuad_print_exp
    (64) escritura2 -> . STRING agregar_cuad_print_str
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    STRING          shift and go to state 142
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 141
    escritura2                     shift and go to state 241
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 206

    (62) escritura2 -> STRING agregar_cuad_print_str COMA . escritura2
    (61) escritura2 -> . expresion agregar_cuad_print_exp COMA escritura2
    (62) escritura2 -> . STRING agregar_cuad_print_str COMA escritura2
    (63) escritura2 -> . expresion agregar_cuad_print_exp
    (64) escritura2 -> . STRING agregar_cuad_print_str
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    STRING          shift and go to state 142
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    escritura2                     shift and go to state 242
    expresion                      shift and go to state 141
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 207

    (75) expresion -> exp_comp agregar_cuad_log exp_log .

    COMA            reduce using rule 75 (expresion -> exp_comp agregar_cuad_log exp_log .)
    RPAREN          reduce using rule 75 (expresion -> exp_comp agregar_cuad_log exp_log .)
    SEMICOLON       reduce using rule 75 (expresion -> exp_comp agregar_cuad_log exp_log .)


state 208

    (76) exp_log -> AND . agregar_exp_op expresion
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 243
    empty                          shift and go to state 122

state 209

    (77) exp_log -> OR . agregar_exp_op expresion
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 244
    empty                          shift and go to state 122

state 210

    (78) exp_log -> empty .

    COMA            reduce using rule 78 (exp_log -> empty .)
    RPAREN          reduce using rule 78 (exp_log -> empty .)
    SEMICOLON       reduce using rule 78 (exp_log -> empty .)


state 211

    (80) exp_comp -> exp agregar_cuad_comp MRTHAN . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 245
    empty                          shift and go to state 122

state 212

    (81) exp_comp -> exp agregar_cuad_comp LSTHAN . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 246
    empty                          shift and go to state 122

state 213

    (82) exp_comp -> exp agregar_cuad_comp LSETHAN . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 247
    empty                          shift and go to state 122

state 214

    (83) exp_comp -> exp agregar_cuad_comp MRETHAN . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 248
    empty                          shift and go to state 122

state 215

    (84) exp_comp -> exp agregar_cuad_comp DOUBLE . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 249
    empty                          shift and go to state 122

state 216

    (85) exp_comp -> exp agregar_cuad_comp NOT_EQUALS . agregar_exp_op exp_comp
    (105) agregar_exp_op -> . empty
    (102) empty -> .

    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    INT             reduce using rule 102 (empty -> .)
    FLOAT           reduce using rule 102 (empty -> .)
    CHAR            reduce using rule 102 (empty -> .)

    agregar_exp_op                 shift and go to state 250
    empty                          shift and go to state 122

state 217

    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if . THEN bloque
    (66) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if . THEN bloque else

    THEN            shift and go to state 251


state 218

    (118) agregar_cuad_if -> empty .

    THEN            reduce using rule 118 (agregar_cuad_if -> empty .)


state 219

    (42) func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func . SEMICOLON

    SEMICOLON       shift and go to state 252


state 220

    (130) agregar_cuad_esp_param_func -> empty .

    SEMICOLON       reduce using rule 130 (agregar_cuad_esp_param_func -> empty .)


state 221

    (43) func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .

    ID              reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RETURN          reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    READ            reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    WRITE           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    IF              reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    COLOR           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    WHILE           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    FOR             reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    LINE            reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    POINT           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    CIRCLE          reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    ARCUP           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    SETX            reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    SETY            reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RIGHT           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    LEFT            reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENSIZE         reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENUP           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    PENDOWN         reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    CLEAR           reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)
    RBRACKET        reduce using rule 43 (func_esp -> func_esp_name_no_param LPAREN RPAREN agregar_cuad_esp_no_param_func SEMICOLON .)


state 222

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA . exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 253
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 223

    (73) condicional -> WHILE agregar_while LPAREN expresion RPAREN . agregar_while_cond DO bloque
    (124) agregar_while_cond -> . empty
    (102) empty -> .

    DO              reduce using rule 102 (empty -> .)

    agregar_while_cond             shift and go to state 254
    empty                          shift and go to state 255

state 224

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp . igualar_for_var TO exp agregar_for_cond DO bloque
    (121) igualar_for_var -> . empty
    (102) empty -> .

    TO              reduce using rule 102 (empty -> .)

    igualar_for_var                shift and go to state 256
    empty                          shift and go to state 257

state 225

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque . finalizar_funs
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque . finalizar_funs funs
    (125) finalizar_funs -> . empty
    (102) empty -> .

    FUNC            reduce using rule 102 (empty -> .)
    MAIN            reduce using rule 102 (empty -> .)

    finalizar_funs                 shift and go to state 258
    empty                          shift and go to state 259

state 226

    (20) parametros -> tipo ID agregar_param COMA . parametros
    (20) parametros -> . tipo ID agregar_param COMA parametros
    (21) parametros -> . tipo ID agregar_param
    (22) parametros -> . empty
    (10) tipo -> . NOM_INT
    (11) tipo -> . NOM_FLOAT
    (12) tipo -> . NOM_CHAR
    (102) empty -> .

    NOM_INT         shift and go to state 16
    NOM_FLOAT       shift and go to state 17
    NOM_CHAR        shift and go to state 18
    RPAREN          reduce using rule 102 (empty -> .)

    tipo                           shift and go to state 119
    parametros                     shift and go to state 260
    empty                          shift and go to state 120

state 227

    (35) asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .

    ID              reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RETURN          reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    READ            reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    WRITE           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    IF              reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    COLOR           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    WHILE           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    FOR             reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    LINE            reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    POINT           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    CIRCLE          reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    ARCUP           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    ARCDOWN         reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    SETX            reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    SETY            reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RIGHT           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    LEFT            reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENSIZE         reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENUP           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    PENDOWN         reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    CLEAR           reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)
    RBRACKET        reduce using rule 35 (asignacion -> exp_var EQUALS agregar_exp_op expresion SEMICOLON agregar_cuad_asign .)


state 228

    (114) agregar_cuad_asign -> empty .

    ID              reduce using rule 114 (agregar_cuad_asign -> empty .)
    RETURN          reduce using rule 114 (agregar_cuad_asign -> empty .)
    READ            reduce using rule 114 (agregar_cuad_asign -> empty .)
    WRITE           reduce using rule 114 (agregar_cuad_asign -> empty .)
    IF              reduce using rule 114 (agregar_cuad_asign -> empty .)
    COLOR           reduce using rule 114 (agregar_cuad_asign -> empty .)
    WHILE           reduce using rule 114 (agregar_cuad_asign -> empty .)
    FOR             reduce using rule 114 (agregar_cuad_asign -> empty .)
    LINE            reduce using rule 114 (agregar_cuad_asign -> empty .)
    POINT           reduce using rule 114 (agregar_cuad_asign -> empty .)
    CIRCLE          reduce using rule 114 (agregar_cuad_asign -> empty .)
    ARCUP           reduce using rule 114 (agregar_cuad_asign -> empty .)
    ARCDOWN         reduce using rule 114 (agregar_cuad_asign -> empty .)
    SETX            reduce using rule 114 (agregar_cuad_asign -> empty .)
    SETY            reduce using rule 114 (agregar_cuad_asign -> empty .)
    RIGHT           reduce using rule 114 (agregar_cuad_asign -> empty .)
    LEFT            reduce using rule 114 (agregar_cuad_asign -> empty .)
    PENSIZE         reduce using rule 114 (agregar_cuad_asign -> empty .)
    PENUP           reduce using rule 114 (agregar_cuad_asign -> empty .)
    PENDOWN         reduce using rule 114 (agregar_cuad_asign -> empty .)
    CLEAR           reduce using rule 114 (agregar_cuad_asign -> empty .)
    RBRACKET        reduce using rule 114 (agregar_cuad_asign -> empty .)


state 229

    (36) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func . SEMICOLON

    SEMICOLON       shift and go to state 261


state 230

    (37) modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .

    ID              reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RETURN          reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    READ            reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    WRITE           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    IF              reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    COLOR           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    WHILE           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    FOR             reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    LINE            reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    POINT           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    CIRCLE          reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    ARCUP           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    ARCDOWN         reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    SETX            reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    SETY            reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RIGHT           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    LEFT            reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENSIZE         reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENUP           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    PENDOWN         reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    CLEAR           reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)
    RBRACKET        reduce using rule 37 (modulo_v -> ID agregar_cuad_era LPAREN RPAREN fin_func SEMICOLON .)


state 231

    (45) e -> exp agregar_param_check COMA . e
    (45) e -> . exp agregar_param_check COMA e
    (46) e -> . exp agregar_param_check
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 157
    e                              shift and go to state 262
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 232

    (98) factor_paren -> LPAREN agregar_exp_op expresion RPAREN .

    TIMES           reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DIVIDE          reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    PLUS            reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MINUS           reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    RPAREN          reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MRTHAN          reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    LSTHAN          reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    LSETHAN         reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    MRETHAN         reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DOUBLE          reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    NOT_EQUALS      reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    AND             reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    OR              reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    COMA            reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    SEMICOLON       reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    TO              reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)
    DO              reduce using rule 98 (factor_paren -> LPAREN agregar_exp_op expresion RPAREN .)


state 233

    (87) exp -> termino agregar_cuad_arith PLUS agregar_exp_op . exp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    termino                        shift and go to state 126
    exp                            shift and go to state 263
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 234

    (88) exp -> termino agregar_cuad_arith MINUS agregar_exp_op . exp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    termino                        shift and go to state 126
    exp                            shift and go to state 264
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 235

    (90) termino -> factor agregar_cuad_factor TIMES agregar_exp_op . termino
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    factor                         shift and go to state 129
    termino                        shift and go to state 265
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 236

    (91) termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op . termino
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    factor                         shift and go to state 129
    termino                        shift and go to state 266
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 237

    (99) return_func -> ID agregar_cuad_era LPAREN e . RPAREN fin_func

    RPAREN          shift and go to state 267


state 238

    (100) return_func -> ID agregar_cuad_era LPAREN RPAREN . fin_func
    (128) fin_func -> . empty
    (102) empty -> .

    TIMES           reduce using rule 102 (empty -> .)
    DIVIDE          reduce using rule 102 (empty -> .)
    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    MRTHAN          reduce using rule 102 (empty -> .)
    LSTHAN          reduce using rule 102 (empty -> .)
    LSETHAN         reduce using rule 102 (empty -> .)
    MRETHAN         reduce using rule 102 (empty -> .)
    DOUBLE          reduce using rule 102 (empty -> .)
    NOT_EQUALS      reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    DO              reduce using rule 102 (empty -> .)

    fin_func                       shift and go to state 268
    empty                          shift and go to state 191

state 239

    (40) lectura2 -> COMA exp_var . agregar_cuad_read lectura2
    (115) agregar_cuad_read -> . empty
    (102) empty -> .

    COMA            reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)

    agregar_cuad_read              shift and go to state 269
    empty                          shift and go to state 168

state 240

    (41) lectura2 -> RPAREN SEMICOLON .

    ID              reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    RETURN          reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    READ            reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    WRITE           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    IF              reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    COLOR           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    WHILE           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    FOR             reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    LINE            reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    POINT           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    ARCUP           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    ARCDOWN         reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    SETX            reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    SETY            reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    RIGHT           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    LEFT            reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    PENUP           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    PENDOWN         reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    CLEAR           reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 41 (lectura2 -> RPAREN SEMICOLON .)


state 241

    (61) escritura2 -> expresion agregar_cuad_print_exp COMA escritura2 .

    RPAREN          reduce using rule 61 (escritura2 -> expresion agregar_cuad_print_exp COMA escritura2 .)


state 242

    (62) escritura2 -> STRING agregar_cuad_print_str COMA escritura2 .

    RPAREN          reduce using rule 62 (escritura2 -> STRING agregar_cuad_print_str COMA escritura2 .)


state 243

    (76) exp_log -> AND agregar_exp_op . expresion
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 270
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 244

    (77) exp_log -> OR agregar_exp_op . expresion
    (75) expresion -> . exp_comp agregar_cuad_log exp_log
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    expresion                      shift and go to state 271
    exp_comp                       shift and go to state 143
    exp                            shift and go to state 144
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 245

    (80) exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 272
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 246

    (81) exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 273
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 247

    (82) exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 274
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 248

    (83) exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 275
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 249

    (84) exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 276
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 250

    (85) exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op . exp_comp
    (79) exp_comp -> . exp agregar_cuad_comp
    (80) exp_comp -> . exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp
    (81) exp_comp -> . exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp
    (82) exp_comp -> . exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp
    (83) exp_comp -> . exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp
    (84) exp_comp -> . exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp
    (85) exp_comp -> . exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 144
    exp_comp                       shift and go to state 277
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 251

    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN . bloque
    (66) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN . bloque else
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 278

state 252

    (42) func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .

    ID              reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RETURN          reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    READ            reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WRITE           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    IF              reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    COLOR           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WHILE           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    FOR             reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LINE            reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    POINT           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CIRCLE          reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCUP           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETX            reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETY            reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RIGHT           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LEFT            reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENSIZE         reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENUP           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENDOWN         reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CLEAR           reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RBRACKET        reduce using rule 42 (func_esp -> func_esp_name_param LPAREN exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)


state 253

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp . COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON

    COMA            shift and go to state 279


state 254

    (73) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond . DO bloque

    DO              shift and go to state 280


state 255

    (124) agregar_while_cond -> empty .

    DO              reduce using rule 124 (agregar_while_cond -> empty .)


state 256

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var . TO exp agregar_for_cond DO bloque

    TO              shift and go to state 281


state 257

    (121) igualar_for_var -> empty .

    TO              reduce using rule 121 (igualar_for_var -> empty .)


state 258

    (18) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs .
    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs . funs
    (17) funs -> . FUNC tipo_func funs2

    MAIN            reduce using rule 18 (funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs .)
    FUNC            shift and go to state 13

    funs                           shift and go to state 282

state 259

    (125) finalizar_funs -> empty .

    FUNC            reduce using rule 125 (finalizar_funs -> empty .)
    MAIN            reduce using rule 125 (finalizar_funs -> empty .)


state 260

    (20) parametros -> tipo ID agregar_param COMA parametros .

    RPAREN          reduce using rule 20 (parametros -> tipo ID agregar_param COMA parametros .)


state 261

    (36) modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .

    ID              reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RETURN          reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    READ            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    WRITE           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    IF              reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    COLOR           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    WHILE           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    FOR             reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    LINE            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    POINT           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    CIRCLE          reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    ARCUP           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    ARCDOWN         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    SETX            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    SETY            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RIGHT           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    LEFT            reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENSIZE         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENUP           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    PENDOWN         reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    CLEAR           reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)
    RBRACKET        reduce using rule 36 (modulo_v -> ID agregar_cuad_era LPAREN e RPAREN fin_func SEMICOLON .)


state 262

    (45) e -> exp agregar_param_check COMA e .

    RPAREN          reduce using rule 45 (e -> exp agregar_param_check COMA e .)


state 263

    (87) exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .

    RPAREN          reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    MRTHAN          reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    LSTHAN          reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    LSETHAN         reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    MRETHAN         reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    DOUBLE          reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    NOT_EQUALS      reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    AND             reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    OR              reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    COMA            reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    SEMICOLON       reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    TO              reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)
    DO              reduce using rule 87 (exp -> termino agregar_cuad_arith PLUS agregar_exp_op exp .)


state 264

    (88) exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .

    RPAREN          reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    MRTHAN          reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    LSTHAN          reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    LSETHAN         reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    MRETHAN         reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    DOUBLE          reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    NOT_EQUALS      reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    AND             reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    OR              reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    COMA            reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    SEMICOLON       reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    TO              reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)
    DO              reduce using rule 88 (exp -> termino agregar_cuad_arith MINUS agregar_exp_op exp .)


state 265

    (90) termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .

    PLUS            reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MINUS           reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    RPAREN          reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MRTHAN          reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    LSTHAN          reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    LSETHAN         reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    MRETHAN         reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    DOUBLE          reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    NOT_EQUALS      reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    AND             reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    OR              reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    COMA            reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    SEMICOLON       reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    TO              reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)
    DO              reduce using rule 90 (termino -> factor agregar_cuad_factor TIMES agregar_exp_op termino .)


state 266

    (91) termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .

    PLUS            reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MINUS           reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    RPAREN          reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MRTHAN          reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    LSTHAN          reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    LSETHAN         reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    MRETHAN         reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    DOUBLE          reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    NOT_EQUALS      reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    AND             reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    OR              reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    COMA            reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    SEMICOLON       reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    TO              reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)
    DO              reduce using rule 91 (termino -> factor agregar_cuad_factor DIVIDE agregar_exp_op termino .)


state 267

    (99) return_func -> ID agregar_cuad_era LPAREN e RPAREN . fin_func
    (128) fin_func -> . empty
    (102) empty -> .

    TIMES           reduce using rule 102 (empty -> .)
    DIVIDE          reduce using rule 102 (empty -> .)
    PLUS            reduce using rule 102 (empty -> .)
    MINUS           reduce using rule 102 (empty -> .)
    RPAREN          reduce using rule 102 (empty -> .)
    MRTHAN          reduce using rule 102 (empty -> .)
    LSTHAN          reduce using rule 102 (empty -> .)
    LSETHAN         reduce using rule 102 (empty -> .)
    MRETHAN         reduce using rule 102 (empty -> .)
    DOUBLE          reduce using rule 102 (empty -> .)
    NOT_EQUALS      reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    COMA            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    DO              reduce using rule 102 (empty -> .)

    fin_func                       shift and go to state 283
    empty                          shift and go to state 191

state 268

    (100) return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .

    TIMES           reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    DIVIDE          reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    PLUS            reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    MINUS           reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    RPAREN          reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    MRTHAN          reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    LSTHAN          reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    LSETHAN         reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    MRETHAN         reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    DOUBLE          reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    NOT_EQUALS      reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    AND             reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    OR              reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    COMA            reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    SEMICOLON       reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    TO              reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)
    DO              reduce using rule 100 (return_func -> ID agregar_cuad_era LPAREN RPAREN fin_func .)


state 269

    (40) lectura2 -> COMA exp_var agregar_cuad_read . lectura2
    (40) lectura2 -> . COMA exp_var agregar_cuad_read lectura2
    (41) lectura2 -> . RPAREN SEMICOLON

    COMA            shift and go to state 202
    RPAREN          shift and go to state 203

    lectura2                       shift and go to state 284

state 270

    (76) exp_log -> AND agregar_exp_op expresion .

    COMA            reduce using rule 76 (exp_log -> AND agregar_exp_op expresion .)
    RPAREN          reduce using rule 76 (exp_log -> AND agregar_exp_op expresion .)
    SEMICOLON       reduce using rule 76 (exp_log -> AND agregar_exp_op expresion .)


state 271

    (77) exp_log -> OR agregar_exp_op expresion .

    COMA            reduce using rule 77 (exp_log -> OR agregar_exp_op expresion .)
    RPAREN          reduce using rule 77 (exp_log -> OR agregar_exp_op expresion .)
    SEMICOLON       reduce using rule 77 (exp_log -> OR agregar_exp_op expresion .)


state 272

    (80) exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .

    AND             reduce using rule 80 (exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .)
    OR              reduce using rule 80 (exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .)
    COMA            reduce using rule 80 (exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 80 (exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 80 (exp_comp -> exp agregar_cuad_comp MRTHAN agregar_exp_op exp_comp .)


state 273

    (81) exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .

    AND             reduce using rule 81 (exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .)
    OR              reduce using rule 81 (exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .)
    COMA            reduce using rule 81 (exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 81 (exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 81 (exp_comp -> exp agregar_cuad_comp LSTHAN agregar_exp_op exp_comp .)


state 274

    (82) exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .

    AND             reduce using rule 82 (exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .)
    OR              reduce using rule 82 (exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .)
    COMA            reduce using rule 82 (exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 82 (exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 82 (exp_comp -> exp agregar_cuad_comp LSETHAN agregar_exp_op exp_comp .)


state 275

    (83) exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .

    AND             reduce using rule 83 (exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .)
    OR              reduce using rule 83 (exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .)
    COMA            reduce using rule 83 (exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 83 (exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 83 (exp_comp -> exp agregar_cuad_comp MRETHAN agregar_exp_op exp_comp .)


state 276

    (84) exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .

    AND             reduce using rule 84 (exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .)
    OR              reduce using rule 84 (exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .)
    COMA            reduce using rule 84 (exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 84 (exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 84 (exp_comp -> exp agregar_cuad_comp DOUBLE agregar_exp_op exp_comp .)


state 277

    (85) exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .

    AND             reduce using rule 85 (exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .)
    OR              reduce using rule 85 (exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .)
    COMA            reduce using rule 85 (exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .)
    RPAREN          reduce using rule 85 (exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .)
    SEMICOLON       reduce using rule 85 (exp_comp -> exp agregar_cuad_comp NOT_EQUALS agregar_exp_op exp_comp .)


state 278

    (65) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .
    (66) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque . else
    (67) else -> . ELSE agregar_cuad_else bloque

    ID              reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RETURN          reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    READ            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    WRITE           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    IF              reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    COLOR           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    WHILE           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    FOR             reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    LINE            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    POINT           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    CIRCLE          reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ARCUP           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ARCDOWN         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    SETX            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    SETY            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RIGHT           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    LEFT            reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENSIZE         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENUP           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    PENDOWN         reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    CLEAR           reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    RBRACKET        reduce using rule 65 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque .)
    ELSE            shift and go to state 286

    else                           shift and go to state 285

state 279

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA . exp RPAREN agregar_cuad_esp_param_func SEMICOLON
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 287
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 280

    (73) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO . bloque
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 288

state 281

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO . exp agregar_for_cond DO bloque
    (86) exp -> . termino agregar_cuad_arith
    (87) exp -> . termino agregar_cuad_arith PLUS agregar_exp_op exp
    (88) exp -> . termino agregar_cuad_arith MINUS agregar_exp_op exp
    (89) termino -> . factor agregar_cuad_factor
    (90) termino -> . factor agregar_cuad_factor TIMES agregar_exp_op termino
    (91) termino -> . factor agregar_cuad_factor DIVIDE agregar_exp_op termino
    (92) factor -> . factor_paren
    (93) factor -> . PLUS var_cte
    (94) factor -> . MINUS var_cte
    (95) factor -> . return_func
    (96) factor -> . var_cte
    (97) factor -> . exp_var
    (98) factor_paren -> . LPAREN agregar_exp_op expresion RPAREN
    (99) return_func -> . ID agregar_cuad_era LPAREN e RPAREN fin_func
    (100) return_func -> . ID agregar_cuad_era LPAREN RPAREN fin_func
    (68) var_cte -> . INT
    (69) var_cte -> . FLOAT
    (70) var_cte -> . CHAR
    (101) exp_var -> . ID

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    LPAREN          shift and go to state 124
    ID              shift and go to state 134
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    CHAR            shift and go to state 137

    exp                            shift and go to state 289
    termino                        shift and go to state 126
    factor                         shift and go to state 129
    factor_paren                   shift and go to state 130
    var_cte                        shift and go to state 131
    return_func                    shift and go to state 132
    exp_var                        shift and go to state 133

state 282

    (19) funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs .

    MAIN            reduce using rule 19 (funs2 -> MODULE ID agregar_funs LPAREN parametros RPAREN vars bloque finalizar_funs funs .)


state 283

    (99) return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .

    TIMES           reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DIVIDE          reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    PLUS            reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MINUS           reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    RPAREN          reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MRTHAN          reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    LSTHAN          reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    LSETHAN         reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    MRETHAN         reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DOUBLE          reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    NOT_EQUALS      reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    AND             reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    OR              reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    COMA            reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    SEMICOLON       reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    TO              reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)
    DO              reduce using rule 99 (return_func -> ID agregar_cuad_era LPAREN e RPAREN fin_func .)


state 284

    (40) lectura2 -> COMA exp_var agregar_cuad_read lectura2 .

    ID              reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RETURN          reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    READ            reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    WRITE           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    IF              reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    COLOR           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    WHILE           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    FOR             reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    LINE            reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    POINT           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    CIRCLE          reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    ARCUP           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    ARCDOWN         reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    SETX            reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    SETY            reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RIGHT           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    LEFT            reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENSIZE         reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENUP           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    PENDOWN         reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    CLEAR           reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)
    RBRACKET        reduce using rule 40 (lectura2 -> COMA exp_var agregar_cuad_read lectura2 .)


state 285

    (66) desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .

    ID              reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RETURN          reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    READ            reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    WRITE           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    IF              reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    COLOR           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    WHILE           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    FOR             reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    LINE            reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    POINT           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    CIRCLE          reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    ARCUP           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    ARCDOWN         reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    SETX            reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    SETY            reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RIGHT           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    LEFT            reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENSIZE         reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENUP           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    PENDOWN         reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    CLEAR           reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)
    RBRACKET        reduce using rule 66 (desicion -> IF LPAREN expresion RPAREN agregar_cuad_if THEN bloque else .)


state 286

    (67) else -> ELSE . agregar_cuad_else bloque
    (119) agregar_cuad_else -> . empty
    (102) empty -> .

    LBRACKET        reduce using rule 102 (empty -> .)

    agregar_cuad_else              shift and go to state 290
    empty                          shift and go to state 291

state 287

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp . RPAREN agregar_cuad_esp_param_func SEMICOLON

    RPAREN          shift and go to state 292


state 288

    (73) condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .

    ID              reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RETURN          reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    READ            reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    WRITE           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    IF              reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    COLOR           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    WHILE           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    FOR             reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    LINE            reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    POINT           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    CIRCLE          reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    ARCUP           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    ARCDOWN         reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    SETX            reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    SETY            reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RIGHT           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    LEFT            reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENSIZE         reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENUP           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    PENDOWN         reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    CLEAR           reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)
    RBRACKET        reduce using rule 73 (condicional -> WHILE agregar_while LPAREN expresion RPAREN agregar_while_cond DO bloque .)


state 289

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp . agregar_for_cond DO bloque
    (122) agregar_for_cond -> . empty
    (102) empty -> .

    DO              reduce using rule 102 (empty -> .)

    agregar_for_cond               shift and go to state 293
    empty                          shift and go to state 294

state 290

    (67) else -> ELSE agregar_cuad_else . bloque
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 295

state 291

    (119) agregar_cuad_else -> empty .

    LBRACKET        reduce using rule 119 (agregar_cuad_else -> empty .)


state 292

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN . agregar_cuad_esp_param_func SEMICOLON
    (130) agregar_cuad_esp_param_func -> . empty
    (102) empty -> .

    SEMICOLON       reduce using rule 102 (empty -> .)

    agregar_cuad_esp_param_func    shift and go to state 296
    empty                          shift and go to state 220

state 293

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond . DO bloque

    DO              shift and go to state 297


state 294

    (122) agregar_for_cond -> empty .

    DO              reduce using rule 122 (agregar_for_cond -> empty .)


state 295

    (67) else -> ELSE agregar_cuad_else bloque .

    ID              reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    RETURN          reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    READ            reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    WRITE           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    IF              reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    COLOR           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    WHILE           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    FOR             reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    LINE            reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    POINT           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    CIRCLE          reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    ARCUP           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    ARCDOWN         reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    SETX            reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    SETY            reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    RIGHT           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    LEFT            reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    PENSIZE         reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    PENUP           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    PENDOWN         reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    CLEAR           reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)
    RBRACKET        reduce using rule 67 (else -> ELSE agregar_cuad_else bloque .)


state 296

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func . SEMICOLON

    SEMICOLON       shift and go to state 298


state 297

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO . bloque
    (23) bloque -> . LBRACKET bloque1 RBRACKET
    (24) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 44

    bloque                         shift and go to state 299

state 298

    (44) func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .

    ID              reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RETURN          reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    READ            reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WRITE           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    IF              reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    COLOR           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    WHILE           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    FOR             reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LINE            reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    POINT           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CIRCLE          reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCUP           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    ARCDOWN         reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETX            reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    SETY            reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RIGHT           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    LEFT            reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENSIZE         reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENUP           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    PENDOWN         reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    CLEAR           reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)
    RBRACKET        reduce using rule 44 (func_esp -> COLOR agregar_esp_func LPAREN exp COMA exp COMA exp RPAREN agregar_cuad_esp_param_func SEMICOLON .)


state 299

    (74) no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .

    ID              reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RETURN          reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    READ            reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    WRITE           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    IF              reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    COLOR           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    WHILE           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    FOR             reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    LINE            reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    POINT           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    CIRCLE          reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    ARCUP           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    ARCDOWN         reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    SETX            reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    SETY            reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RIGHT           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    LEFT            reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENSIZE         reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENUP           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    PENDOWN         reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    CLEAR           reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)
    RBRACKET        reduce using rule 74 (no_condicional -> FOR ID agregar_for_var EQUALS exp igualar_for_var TO exp agregar_for_cond DO bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACKET in state 44 resolved as shift
